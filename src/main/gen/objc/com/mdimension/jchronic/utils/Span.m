//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/main/java/com/mdimension/jchronic/utils/Span.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/utils/Range.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "java/text/DateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"

@implementation ComMdimensionJchronicUtilsSpan

- (instancetype __nonnull)initWithJavaUtilCalendar:(JavaUtilCalendar *)begin
                                           withInt:(jint)field
                                          withLong:(jlong)amount {
  ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withInt_withLong_(self, begin, field, amount);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilCalendar:(JavaUtilCalendar *)begin
                              withJavaUtilCalendar:(JavaUtilCalendar *)end {
  ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(self, begin, end);
  return self;
}

- (instancetype __nonnull)initWithLong:(jlong)begin
                              withLong:(jlong)end {
  ComMdimensionJchronicUtilsSpan_initWithLong_withLong_(self, begin, end);
  return self;
}

- (JavaUtilCalendar *)getBeginCalendar {
  JavaUtilCalendar *cal = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(cal)) setTimeInMillisWithLong:[self getBegin] * 1000];
  return cal;
}

- (JavaUtilCalendar *)getEndCalendar {
  JavaUtilCalendar *cal = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(cal)) setTimeInMillisWithLong:[self getEnd] * 1000];
  return cal;
}

- (ComMdimensionJchronicUtilsSpan *)addWithLong:(jlong)seconds {
  return create_ComMdimensionJchronicUtilsSpan_initWithLong_withLong_([self getBegin] + seconds, [self getEnd] + seconds);
}

- (ComMdimensionJchronicUtilsSpan *)subtractWithLong:(jlong)seconds {
  return [self addWithLong:-seconds];
}

- (NSString *)description {
  return JreStrcat("C$$$C", '(', [((JavaTextDateFormat *) nil_chk(JavaTextDateFormat_getDateTimeInstance())) formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk([self getBeginCalendar])) getTime]], @"..", [((JavaTextDateFormat *) nil_chk(JavaTextDateFormat_getDateTimeInstance())) formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk([self getEndCalendar])) getTime]], ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilCalendar:withInt:withLong:);
  methods[1].selector = @selector(initWithJavaUtilCalendar:withJavaUtilCalendar:);
  methods[2].selector = @selector(initWithLong:withLong:);
  methods[3].selector = @selector(getBeginCalendar);
  methods[4].selector = @selector(getEndCalendar);
  methods[5].selector = @selector(addWithLong:);
  methods[6].selector = @selector(subtractWithLong:);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaUtilCalendar;IJ", "LJavaUtilCalendar;LJavaUtilCalendar;", "JJ", "add", "J", "subtract", "toString" };
  static const J2ObjcClassInfo _ComMdimensionJchronicUtilsSpan = { "Span", "com.mdimension.jchronic.utils", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicUtilsSpan;
}

@end

void ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsSpan *self, JavaUtilCalendar *begin, jint field, jlong amount) {
  ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(self, begin, ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(begin, field, amount));
}

ComMdimensionJchronicUtilsSpan *new_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withInt_withLong_(JavaUtilCalendar *begin, jint field, jlong amount) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicUtilsSpan, initWithJavaUtilCalendar_withInt_withLong_, begin, field, amount)
}

ComMdimensionJchronicUtilsSpan *create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withInt_withLong_(JavaUtilCalendar *begin, jint field, jlong amount) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicUtilsSpan, initWithJavaUtilCalendar_withInt_withLong_, begin, field, amount)
}

void ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(ComMdimensionJchronicUtilsSpan *self, JavaUtilCalendar *begin, JavaUtilCalendar *end) {
  ComMdimensionJchronicUtilsSpan_initWithLong_withLong_(self, [((JavaUtilCalendar *) nil_chk(begin)) getTimeInMillis] / 1000, [((JavaUtilCalendar *) nil_chk(end)) getTimeInMillis] / 1000);
}

ComMdimensionJchronicUtilsSpan *new_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(JavaUtilCalendar *begin, JavaUtilCalendar *end) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicUtilsSpan, initWithJavaUtilCalendar_withJavaUtilCalendar_, begin, end)
}

ComMdimensionJchronicUtilsSpan *create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(JavaUtilCalendar *begin, JavaUtilCalendar *end) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicUtilsSpan, initWithJavaUtilCalendar_withJavaUtilCalendar_, begin, end)
}

void ComMdimensionJchronicUtilsSpan_initWithLong_withLong_(ComMdimensionJchronicUtilsSpan *self, jlong begin, jlong end) {
  ComMdimensionJchronicUtilsRange_initWithLong_withLong_(self, begin, end);
}

ComMdimensionJchronicUtilsSpan *new_ComMdimensionJchronicUtilsSpan_initWithLong_withLong_(jlong begin, jlong end) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicUtilsSpan, initWithLong_withLong_, begin, end)
}

ComMdimensionJchronicUtilsSpan *create_ComMdimensionJchronicUtilsSpan_initWithLong_withLong_(jlong begin, jlong end) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicUtilsSpan, initWithLong_withLong_, begin, end)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicUtilsSpan)
