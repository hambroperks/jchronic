//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/main/java/com/mdimension/jchronic/utils/Token.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/tags/Tag.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@interface ComMdimensionJchronicUtilsToken () {
 @public
  NSString *_word_;
  id<JavaUtilList> _tags_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicUtilsToken, _word_, NSString *)
J2OBJC_FIELD_SETTER(ComMdimensionJchronicUtilsToken, _tags_, id<JavaUtilList>)

@implementation ComMdimensionJchronicUtilsToken

- (instancetype __nonnull)initWithNSString:(NSString *)word {
  ComMdimensionJchronicUtilsToken_initWithNSString_(self, word);
  return self;
}

- (NSString *)getWord {
  return _word_;
}

- (void)tagWithComMdimensionJchronicTagsTag:(ComMdimensionJchronicTagsTag *)newTag {
  [((id<JavaUtilList>) nil_chk(_tags_)) addWithId:newTag];
}

- (void)untagWithIOSClass:(IOSClass *)tagClass {
  id<JavaUtilIterator> tagIter = [((id<JavaUtilList>) nil_chk(_tags_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(tagIter)) hasNext]) {
    ComMdimensionJchronicTagsTag *tag = [tagIter next];
    if ([((IOSClass *) nil_chk(tagClass)) isInstance:tag]) {
      [tagIter remove];
    }
  }
}

- (jboolean)isTagged {
  return ![((id<JavaUtilList>) nil_chk(_tags_)) isEmpty];
}

- (ComMdimensionJchronicTagsTag *)getTagWithIOSClass:(IOSClass *)tagClass {
  id<JavaUtilList> matches = [self getTagsWithIOSClass:tagClass];
  ComMdimensionJchronicTagsTag *matchingTag = nil;
  if ([((id<JavaUtilList>) nil_chk(matches)) size] > 0) {
    matchingTag = [matches getWithInt:0];
  }
  return matchingTag;
}

- (id<JavaUtilList>)getTags {
  return _tags_;
}

- (id<JavaUtilList>)getTagsWithIOSClass:(IOSClass *)tagClass {
  id<JavaUtilList> matches = create_JavaUtilLinkedList_init();
  id<JavaUtilIterator> tagIter = [((id<JavaUtilList>) nil_chk(_tags_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(tagIter)) hasNext]) {
    ComMdimensionJchronicTagsTag *tag = [tagIter next];
    if ([((IOSClass *) nil_chk(tagClass)) isInstance:tag]) {
      [matches addWithId:tag];
    }
  }
  return matches;
}

- (NSString *)description {
  return JreStrcat("$C@", _word_, ' ', _tags_);
}

- (void)dealloc {
  RELEASE_(_word_);
  RELEASE_(_tags_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicTagsTag;", 0x1, 7, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 10, 5, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getWord);
  methods[2].selector = @selector(tagWithComMdimensionJchronicTagsTag:);
  methods[3].selector = @selector(untagWithIOSClass:);
  methods[4].selector = @selector(isTagged);
  methods[5].selector = @selector(getTagWithIOSClass:);
  methods[6].selector = @selector(getTags);
  methods[7].selector = @selector(getTagsWithIOSClass:);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_word_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tags_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "tag", "LComMdimensionJchronicTagsTag;", "(Lcom/mdimension/jchronic/tags/Tag<*>;)V", "untag", "LIOSClass;", "(Ljava/lang/Class<*>;)V", "getTag", "<T:Lcom/mdimension/jchronic/tags/Tag;>(Ljava/lang/Class<TT;>;)TT;", "()Ljava/util/List<Lcom/mdimension/jchronic/tags/Tag<*>;>;", "getTags", "<T:Lcom/mdimension/jchronic/tags/Tag<*>;>(Ljava/lang/Class<TT;>;)Ljava/util/List<TT;>;", "toString", "Ljava/util/List<Lcom/mdimension/jchronic/tags/Tag<*>;>;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicUtilsToken = { "Token", "com.mdimension.jchronic.utils", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicUtilsToken;
}

@end

void ComMdimensionJchronicUtilsToken_initWithNSString_(ComMdimensionJchronicUtilsToken *self, NSString *word) {
  NSObject_init(self);
  JreStrongAssign(&self->_word_, word);
  JreStrongAssignAndConsume(&self->_tags_, new_JavaUtilLinkedList_init());
}

ComMdimensionJchronicUtilsToken *new_ComMdimensionJchronicUtilsToken_initWithNSString_(NSString *word) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicUtilsToken, initWithNSString_, word)
}

ComMdimensionJchronicUtilsToken *create_ComMdimensionJchronicUtilsToken_initWithNSString_(NSString *word) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicUtilsToken, initWithNSString_, word)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicUtilsToken)
