//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/main/java/com/mdimension/jchronic/utils/Range.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/utils/Range.h"

@interface ComMdimensionJchronicUtilsRange () {
 @public
  jlong _begin_;
  jlong _end_;
}

@end

@implementation ComMdimensionJchronicUtilsRange

- (instancetype __nonnull)initWithLong:(jlong)begin
                              withLong:(jlong)end {
  ComMdimensionJchronicUtilsRange_initWithLong_withLong_(self, begin, end);
  return self;
}

- (jlong)getBegin {
  return _begin_;
}

- (jlong)getEnd {
  return _end_;
}

- (jlong)getWidth {
  return [self getEnd] - [self getBegin];
}

- (jboolean)isSingularity {
  return [self getEnd] == [self getBegin];
}

- (jboolean)containsWithLong:(jlong)value {
  return _begin_ <= value && _end_ >= value;
}

- (NSUInteger)hash {
  return (jint) (_begin_ * _end_);
}

- (jboolean)isEqual:(id)obj {
  return [obj isKindOfClass:[ComMdimensionJchronicUtilsRange class]] && ((ComMdimensionJchronicUtilsRange *) nil_chk(((ComMdimensionJchronicUtilsRange *) cast_chk(obj, [ComMdimensionJchronicUtilsRange class]))))->_begin_ == _begin_ && ((ComMdimensionJchronicUtilsRange *) nil_chk(((ComMdimensionJchronicUtilsRange *) cast_chk(obj, [ComMdimensionJchronicUtilsRange class]))))->_end_ == _end_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLong:withLong:);
  methods[1].selector = @selector(getBegin);
  methods[2].selector = @selector(getEnd);
  methods[3].selector = @selector(getWidth);
  methods[4].selector = @selector(isSingularity);
  methods[5].selector = @selector(containsWithLong:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_begin_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_end_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JJ", "contains", "J", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicUtilsRange = { "Range", "com.mdimension.jchronic.utils", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicUtilsRange;
}

@end

void ComMdimensionJchronicUtilsRange_initWithLong_withLong_(ComMdimensionJchronicUtilsRange *self, jlong begin, jlong end) {
  NSObject_init(self);
  self->_begin_ = begin;
  self->_end_ = end;
}

ComMdimensionJchronicUtilsRange *new_ComMdimensionJchronicUtilsRange_initWithLong_withLong_(jlong begin, jlong end) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicUtilsRange, initWithLong_withLong_, begin, end)
}

ComMdimensionJchronicUtilsRange *create_ComMdimensionJchronicUtilsRange_initWithLong_withLong_(jlong begin, jlong end) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicUtilsRange, initWithLong_withLong_, begin, end)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicUtilsRange)
