//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/main/java/com/mdimension/jchronic/repeaters/RepeaterMonthName.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/repeaters/Repeater.h"
#include "com/mdimension/jchronic/repeaters/RepeaterMonthName.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Calendar.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComMdimensionJchronicRepeatersRepeaterMonthName () {
 @public
  JavaUtilCalendar *_currentMonthBegin_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicRepeatersRepeaterMonthName, _currentMonthBegin_, JavaUtilCalendar *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_JAN_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_JAN_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, JAN_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_FEB_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_FEB_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, FEB_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_MAR_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_MAR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, MAR_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_APR_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_APR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, APR_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_MAY_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_MAY_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, MAY_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_JUN_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_JUN_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, JUN_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_JUL_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_JUL_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, JUL_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_AUG_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_AUG_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, AUG_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_SEP_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_SEP_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, SEP_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_OCT_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_OCT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, OCT_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_NOV_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_NOV_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, NOV_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_get_DEC_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterMonthName_DEC_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterMonthName, DEC_PATTERN, JavaUtilRegexPattern *)

inline jint ComMdimensionJchronicRepeatersRepeaterMonthName_get_MONTH_SECONDS(void);
#define ComMdimensionJchronicRepeatersRepeaterMonthName_MONTH_SECONDS 2592000
J2OBJC_STATIC_FIELD_CONSTANT(ComMdimensionJchronicRepeatersRepeaterMonthName, MONTH_SECONDS, jint)

__attribute__((unused)) static void ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_initWithNSString_withInt_(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(ComMdimensionJchronicRepeatersRepeaterMonthName)

@implementation ComMdimensionJchronicRepeatersRepeaterMonthName

- (instancetype __nonnull)initWithComMdimensionJchronicRepeatersRepeaterMonthName_MonthName:(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *)type {
  ComMdimensionJchronicRepeatersRepeaterMonthName_initWithComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_(self, type);
  return self;
}

- (jint)getIndex {
  return [((ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *) nil_chk([self getType])) ordinal];
}

- (ComMdimensionJchronicUtilsSpan *)_nextSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  if (_currentMonthBegin_ == nil) {
    jint targetMonth = [((ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *) nil_chk([self getType])) ordinal];
    jint nowMonth = [((JavaUtilCalendar *) nil_chk([self getNow])) getWithInt:JavaUtilCalendar_MONTH] + 1;
    if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) {
      if (nowMonth < targetMonth) {
        JreStrongAssign(&_currentMonthBegin_, ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_([self getNow], targetMonth));
      }
      else if (nowMonth > targetMonth) {
        JreStrongAssign(&_currentMonthBegin_, ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_([self getNow], targetMonth), JavaUtilCalendar_YEAR, 1));
      }
    }
    else if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, NONE)) {
      if (nowMonth <= targetMonth) {
        JreStrongAssign(&_currentMonthBegin_, ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_([self getNow], targetMonth));
      }
      else if (nowMonth > targetMonth) {
        JreStrongAssign(&_currentMonthBegin_, ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_([self getNow], targetMonth), JavaUtilCalendar_YEAR, 1));
      }
    }
    else if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)) {
      if (nowMonth > targetMonth) {
        JreStrongAssign(&_currentMonthBegin_, ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_([self getNow], targetMonth));
      }
      else if (nowMonth <= targetMonth) {
        JreStrongAssign(&_currentMonthBegin_, ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_([self getNow], targetMonth), JavaUtilCalendar_YEAR, -1));
      }
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Unable to handle pointer ", pointer, '.'));
    }
    if (_currentMonthBegin_ == nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Current month should be set by now.");
    }
  }
  else {
    if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) {
      JreStrongAssign(&_currentMonthBegin_, ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(_currentMonthBegin_, JavaUtilCalendar_YEAR, 1));
    }
    else if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)) {
      JreStrongAssign(&_currentMonthBegin_, ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(_currentMonthBegin_, JavaUtilCalendar_YEAR, -1));
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Unable to handle pointer ", pointer, '.'));
    }
  }
  return create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withInt_withLong_(_currentMonthBegin_, JavaUtilCalendar_MONTH, 1);
}

- (ComMdimensionJchronicUtilsSpan *)_thisSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  ComMdimensionJchronicUtilsSpan *span;
  if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)) {
    span = [self nextSpanWithComMdimensionJchronicTagsPointer_PointerType:pointer];
  }
  else if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE) || pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, NONE)) {
    span = [self nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, NONE)];
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Unable to handle pointer ", pointer, '.'));
  }
  return span;
}

- (ComMdimensionJchronicUtilsSpan *)getOffsetWithComMdimensionJchronicUtilsSpan:(ComMdimensionJchronicUtilsSpan *)span
                                                                        withInt:(jint)amount
                               withComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Not implemented.");
}

- (jint)getWidth {
  return ComMdimensionJchronicRepeatersRepeaterMonthName_MONTH_SECONDS;
}

- (NSString *)description {
  return JreStrcat("$$@", [super description], @"-monthname-", [self getType]);
}

+ (ComMdimensionJchronicRepeatersRepeaterMonthName *)scanWithComMdimensionJchronicUtilsToken:(ComMdimensionJchronicUtilsToken *)token {
  return ComMdimensionJchronicRepeatersRepeaterMonthName_scanWithComMdimensionJchronicUtilsToken_(token);
}

- (void)dealloc {
  RELEASE_(_currentMonthBegin_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicRepeatersRepeaterMonthName;", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComMdimensionJchronicRepeatersRepeaterMonthName_MonthName:);
  methods[1].selector = @selector(getIndex);
  methods[2].selector = @selector(_nextSpanWithComMdimensionJchronicTagsPointer_PointerType:);
  methods[3].selector = @selector(_thisSpanWithComMdimensionJchronicTagsPointer_PointerType:);
  methods[4].selector = @selector(getOffsetWithComMdimensionJchronicUtilsSpan:withInt:withComMdimensionJchronicTagsPointer_PointerType:);
  methods[5].selector = @selector(getWidth);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(scanWithComMdimensionJchronicUtilsToken:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "JAN_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "FEB_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "MAR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "APR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "MAY_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "JUN_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "JUL_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "AUG_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "SEP_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "OCT_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "NOV_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "DEC_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "MONTH_SECONDS", "I", .constantValue.asInt = ComMdimensionJchronicRepeatersRepeaterMonthName_MONTH_SECONDS, 0x1a, -1, -1, -1, -1 },
    { "_currentMonthBegin_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", "_nextSpan", "LComMdimensionJchronicTagsPointer_PointerType;", "_thisSpan", "getOffset", "LComMdimensionJchronicUtilsSpan;ILComMdimensionJchronicTagsPointer_PointerType;", "toString", "scan", "LComMdimensionJchronicUtilsToken;", &ComMdimensionJchronicRepeatersRepeaterMonthName_JAN_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_FEB_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_MAR_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_APR_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_MAY_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_JUN_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_JUL_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_AUG_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_SEP_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_OCT_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_NOV_PATTERN, &ComMdimensionJchronicRepeatersRepeaterMonthName_DEC_PATTERN, "Lcom/mdimension/jchronic/repeaters/Repeater<Lcom/mdimension/jchronic/repeaters/RepeaterMonthName$MonthName;>;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicRepeatersRepeaterMonthName = { "RepeaterMonthName", "com.mdimension.jchronic.repeaters", ptrTable, methods, fields, 7, 0x1, 8, 14, -1, 0, -1, 21, -1 };
  return &_ComMdimensionJchronicRepeatersRepeaterMonthName;
}

+ (void)initialize {
  if (self == [ComMdimensionJchronicRepeatersRepeaterMonthName class]) {
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_JAN_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^jan\\.?(uary)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_FEB_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^feb\\.?(ruary)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_MAR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^mar\\.?(ch)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_APR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^apr\\.?(il)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_MAY_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^may$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_JUN_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^jun\\.?e?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_JUL_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^jul\\.?y?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_AUG_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^aug\\.?(ust)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_SEP_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^sep\\.?(t\\.?|tember)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_OCT_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^oct\\.?(ober)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_NOV_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^nov\\.?(ember)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterMonthName_DEC_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^dec\\.?(ember)?$"));
    J2OBJC_SET_INITIALIZED(ComMdimensionJchronicRepeatersRepeaterMonthName)
  }
}

@end

void ComMdimensionJchronicRepeatersRepeaterMonthName_initWithComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_(ComMdimensionJchronicRepeatersRepeaterMonthName *self, ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *type) {
  ComMdimensionJchronicRepeatersRepeater_initWithId_(self, type);
}

ComMdimensionJchronicRepeatersRepeaterMonthName *new_ComMdimensionJchronicRepeatersRepeaterMonthName_initWithComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *type) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicRepeatersRepeaterMonthName, initWithComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_, type)
}

ComMdimensionJchronicRepeatersRepeaterMonthName *create_ComMdimensionJchronicRepeatersRepeaterMonthName_initWithComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *type) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicRepeatersRepeaterMonthName, initWithComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_, type)
}

ComMdimensionJchronicRepeatersRepeaterMonthName *ComMdimensionJchronicRepeatersRepeaterMonthName_scanWithComMdimensionJchronicUtilsToken_(ComMdimensionJchronicUtilsToken *token) {
  ComMdimensionJchronicRepeatersRepeaterMonthName_initialize();
  id<JavaUtilMap> scanner = create_JavaUtilHashMap_init();
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_JAN_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, JANUARY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_FEB_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, FEBRUARY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_MAR_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, MARCH)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_APR_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, APRIL)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_MAY_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, MAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_JUN_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, JUNE)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_JUL_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, JULY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_AUG_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, AUGUST)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_SEP_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, SEPTEMBER)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_OCT_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, OCTOBER)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_NOV_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, NOVEMBER)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterMonthName_DEC_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, DECEMBER)];
  for (JavaUtilRegexPattern * __strong scannerItem in nil_chk([scanner keySet])) {
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(scannerItem)) matcherWithJavaLangCharSequence:[((ComMdimensionJchronicUtilsToken *) nil_chk(token)) getWord]])) matches]) {
      return create_ComMdimensionJchronicRepeatersRepeaterMonthName_initWithComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_([scanner getWithId:scannerItem]);
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeaterMonthName)

J2OBJC_INITIALIZED_DEFN(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName)

ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_values_[13];

@implementation ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName

+ (IOSObjectArray *)values {
  return ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_values();
}

+ (ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *)valueOfWithNSString:(NSString *)name {
  return ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_ZERO_MONTH", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "JANUARY", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "FEBRUARY", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "MARCH", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "APRIL", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "MAY", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "JUNE", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "JULY", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "AUGUST", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "SEPTEMBER", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "OCTOBER", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "NOVEMBER", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "DECEMBER", "LComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, _ZERO_MONTH), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, JANUARY), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, FEBRUARY), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, MARCH), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, APRIL), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, MAY), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, JUNE), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, JULY), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, AUGUST), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, SEPTEMBER), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, OCTOBER), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, NOVEMBER), &JreEnum(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName, DECEMBER), "LComMdimensionJchronicRepeatersRepeaterMonthName;", "Ljava/lang/Enum<Lcom/mdimension/jchronic/repeaters/RepeaterMonthName$MonthName;>;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName = { "MonthName", "com.mdimension.jchronic.repeaters", ptrTable, methods, fields, 7, 0x4019, 2, 13, 15, -1, -1, 16, -1 };
  return &_ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName;
}

+ (void)initialize {
  if (self == [ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 13 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 13; i++) {
      ((void)(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_initWithNSString_withInt_(e, JreEnumConstantName(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName)
  }
}

@end

void ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_initWithNSString_withInt_(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_values() {
  ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_initialize();
  return [IOSObjectArray arrayWithObjects:ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_values_ count:13 type:ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_class_()];
}

ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_valueOfWithNSString_(NSString *name) {
  ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_initialize();
  for (int i = 0; i < 13; i++) {
    ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *e = ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName *ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_fromOrdinal(NSUInteger ordinal) {
  ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_initialize();
  if (ordinal >= 13) {
    return nil;
  }
  return ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeaterMonthName_MonthName)
