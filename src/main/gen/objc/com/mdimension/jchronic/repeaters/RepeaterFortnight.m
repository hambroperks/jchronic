//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/main/java/com/mdimension/jchronic/repeaters/RepeaterFortnight.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/repeaters/RepeaterDay.h"
#include "com/mdimension/jchronic/repeaters/RepeaterDayName.h"
#include "com/mdimension/jchronic/repeaters/RepeaterFortnight.h"
#include "com/mdimension/jchronic/repeaters/RepeaterHour.h"
#include "com/mdimension/jchronic/repeaters/RepeaterUnit.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Calendar.h"

@interface ComMdimensionJchronicRepeatersRepeaterFortnight () {
 @public
  JavaUtilCalendar *_currentFortnightStart_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicRepeatersRepeaterFortnight, _currentFortnightStart_, JavaUtilCalendar *)

@implementation ComMdimensionJchronicRepeatersRepeaterFortnight

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComMdimensionJchronicRepeatersRepeaterFortnight_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComMdimensionJchronicUtilsSpan *)_nextSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  if (_currentFortnightStart_ == nil) {
    if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) {
      ComMdimensionJchronicRepeatersRepeaterDayName *sundayRepeater = create_ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, SUNDAY));
      [sundayRepeater setStartWithJavaUtilCalendar:[self getNow]];
      ComMdimensionJchronicUtilsSpan *nextSundaySpan = [sundayRepeater nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)];
      JreStrongAssign(&_currentFortnightStart_, [((ComMdimensionJchronicUtilsSpan *) nil_chk(nextSundaySpan)) getBeginCalendar]);
    }
    else if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)) {
      ComMdimensionJchronicRepeatersRepeaterDayName *sundayRepeater = create_ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, SUNDAY));
      [sundayRepeater setStartWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_([self getNow], JavaUtilCalendar_SECOND, ComMdimensionJchronicRepeatersRepeaterDay_DAY_SECONDS)];
      [sundayRepeater nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
      [sundayRepeater nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
      ComMdimensionJchronicUtilsSpan *lastSundaySpan = [sundayRepeater nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
      JreStrongAssign(&_currentFortnightStart_, [((ComMdimensionJchronicUtilsSpan *) nil_chk(lastSundaySpan)) getBeginCalendar]);
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Unable to handle pointer ", pointer, '.'));
    }
  }
  else {
    jint direction = (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) ? 1 : -1;
    [_currentFortnightStart_ addWithInt:JavaUtilCalendar_SECOND withInt:direction * ComMdimensionJchronicRepeatersRepeaterFortnight_FORTNIGHT_SECONDS];
  }
  return create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withInt_withLong_(_currentFortnightStart_, JavaUtilCalendar_SECOND, ComMdimensionJchronicRepeatersRepeaterFortnight_FORTNIGHT_SECONDS);
}

- (ComMdimensionJchronicUtilsSpan *)_thisSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  if (pointer == nil) {
    pointer = JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE);
  }
  ComMdimensionJchronicUtilsSpan *span;
  if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) {
    JavaUtilCalendar *thisFortnightStart = ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsTime_ymdhWithJavaUtilCalendar_([self getNow]), JavaUtilCalendar_SECOND, ComMdimensionJchronicRepeatersRepeaterHour_HOUR_SECONDS);
    ComMdimensionJchronicRepeatersRepeaterDayName *sundayRepeater = create_ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, SUNDAY));
    [sundayRepeater setStartWithJavaUtilCalendar:[self getNow]];
    [sundayRepeater thisSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)];
    ComMdimensionJchronicUtilsSpan *thisSundaySpan = [sundayRepeater thisSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)];
    JavaUtilCalendar *thisFortnightEnd = [((ComMdimensionJchronicUtilsSpan *) nil_chk(thisSundaySpan)) getBeginCalendar];
    span = create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(thisFortnightStart, thisFortnightEnd);
  }
  else if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)) {
    JavaUtilCalendar *thisFortnightEnd = ComMdimensionJchronicUtilsTime_ymdhWithJavaUtilCalendar_([self getNow]);
    ComMdimensionJchronicRepeatersRepeaterDayName *sundayRepeater = create_ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, SUNDAY));
    [sundayRepeater setStartWithJavaUtilCalendar:[self getNow]];
    ComMdimensionJchronicUtilsSpan *lastSundaySpan = [sundayRepeater nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
    JavaUtilCalendar *thisFortnightStart = [((ComMdimensionJchronicUtilsSpan *) nil_chk(lastSundaySpan)) getBeginCalendar];
    span = create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(thisFortnightStart, thisFortnightEnd);
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Unable to handle pointer ", pointer, '.'));
  }
  return span;
}

- (ComMdimensionJchronicUtilsSpan *)getOffsetWithComMdimensionJchronicUtilsSpan:(ComMdimensionJchronicUtilsSpan *)span
                                                                        withInt:(jint)amount
                               withComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  jint direction = (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) ? 1 : -1;
  ComMdimensionJchronicUtilsSpan *offsetSpan = [((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) addWithLong:direction * amount * ComMdimensionJchronicRepeatersRepeaterFortnight_FORTNIGHT_SECONDS];
  return offsetSpan;
}

- (jint)getWidth {
  return ComMdimensionJchronicRepeatersRepeaterFortnight_FORTNIGHT_SECONDS;
}

- (NSString *)description {
  return JreStrcat("$$", [super description], @"-fortnight");
}

- (void)dealloc {
  RELEASE_(_currentFortnightStart_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(_nextSpanWithComMdimensionJchronicTagsPointer_PointerType:);
  methods[2].selector = @selector(_thisSpanWithComMdimensionJchronicTagsPointer_PointerType:);
  methods[3].selector = @selector(getOffsetWithComMdimensionJchronicUtilsSpan:withInt:withComMdimensionJchronicTagsPointer_PointerType:);
  methods[4].selector = @selector(getWidth);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FORTNIGHT_SECONDS", "I", .constantValue.asInt = ComMdimensionJchronicRepeatersRepeaterFortnight_FORTNIGHT_SECONDS, 0x19, -1, -1, -1, -1 },
    { "_currentFortnightStart_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "_nextSpan", "LComMdimensionJchronicTagsPointer_PointerType;", "_thisSpan", "getOffset", "LComMdimensionJchronicUtilsSpan;ILComMdimensionJchronicTagsPointer_PointerType;", "toString" };
  static const J2ObjcClassInfo _ComMdimensionJchronicRepeatersRepeaterFortnight = { "RepeaterFortnight", "com.mdimension.jchronic.repeaters", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicRepeatersRepeaterFortnight;
}

@end

void ComMdimensionJchronicRepeatersRepeaterFortnight_init(ComMdimensionJchronicRepeatersRepeaterFortnight *self) {
  ComMdimensionJchronicRepeatersRepeaterUnit_init(self);
}

ComMdimensionJchronicRepeatersRepeaterFortnight *new_ComMdimensionJchronicRepeatersRepeaterFortnight_init() {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicRepeatersRepeaterFortnight, init)
}

ComMdimensionJchronicRepeatersRepeaterFortnight *create_ComMdimensionJchronicRepeatersRepeaterFortnight_init() {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicRepeatersRepeaterFortnight, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeaterFortnight)
