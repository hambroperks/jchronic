//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jchronic/src/main/java/com/mdimension/jchronic/utils/Token.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/tags/Tag.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@interface ComMdimensionJchronicUtilsToken () {
 @public
  NSString *_word_;
  id<JavaUtilList> _tags_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicUtilsToken, _word_, NSString *)
J2OBJC_FIELD_SETTER(ComMdimensionJchronicUtilsToken, _tags_, id<JavaUtilList>)

@implementation ComMdimensionJchronicUtilsToken

- (instancetype)initWithNSString:(NSString *)word {
  ComMdimensionJchronicUtilsToken_initWithNSString_(self, word);
  return self;
}

- (NSString *)getWord {
  return _word_;
}

- (void)tagWithComMdimensionJchronicTagsTag:(ComMdimensionJchronicTagsTag *)newTag {
  [((id<JavaUtilList>) nil_chk(_tags_)) addWithId:newTag];
}

- (void)untagWithIOSClass:(IOSClass *)tagClass {
  id<JavaUtilIterator> tagIter = [((id<JavaUtilList>) nil_chk(_tags_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(tagIter)) hasNext]) {
    ComMdimensionJchronicTagsTag *tag = [tagIter next];
    if ([((IOSClass *) nil_chk(tagClass)) isInstance:tag]) {
      [tagIter remove];
    }
  }
}

- (jboolean)isTagged {
  return ![((id<JavaUtilList>) nil_chk(_tags_)) isEmpty];
}

- (ComMdimensionJchronicTagsTag *)getTagWithIOSClass:(IOSClass *)tagClass {
  id<JavaUtilList> matches = [self getTagsWithIOSClass:tagClass];
  ComMdimensionJchronicTagsTag *matchingTag = nil;
  if ([((id<JavaUtilList>) nil_chk(matches)) size] > 0) {
    matchingTag = [matches getWithInt:0];
  }
  return matchingTag;
}

- (id<JavaUtilList>)getTags {
  return _tags_;
}

- (id<JavaUtilList>)getTagsWithIOSClass:(IOSClass *)tagClass {
  id<JavaUtilList> matches = create_JavaUtilLinkedList_init();
  id<JavaUtilIterator> tagIter = [((id<JavaUtilList>) nil_chk(_tags_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(tagIter)) hasNext]) {
    ComMdimensionJchronicTagsTag *tag = [tagIter next];
    if ([((IOSClass *) nil_chk(tagClass)) isInstance:tag]) {
      [matches addWithId:tag];
    }
  }
  return matches;
}

- (NSString *)description {
  return JreStrcat("$C@", _word_, ' ', _tags_);
}

- (void)dealloc {
  RELEASE_(_word_);
  RELEASE_(_tags_);
  [super dealloc];
}

@end

void ComMdimensionJchronicUtilsToken_initWithNSString_(ComMdimensionJchronicUtilsToken *self, NSString *word) {
  NSObject_init(self);
  JreStrongAssign(&self->_word_, word);
  JreStrongAssignAndConsume(&self->_tags_, new_JavaUtilLinkedList_init());
}

ComMdimensionJchronicUtilsToken *new_ComMdimensionJchronicUtilsToken_initWithNSString_(NSString *word) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicUtilsToken, initWithNSString_, word)
}

ComMdimensionJchronicUtilsToken *create_ComMdimensionJchronicUtilsToken_initWithNSString_(NSString *word) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicUtilsToken, initWithNSString_, word)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicUtilsToken)
