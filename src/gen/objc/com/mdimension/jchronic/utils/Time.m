//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jchronic/src/main/java/com/mdimension/jchronic/utils/Time.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Calendar.h"

@implementation ComMdimensionJchronicUtilsTime

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComMdimensionJchronicUtilsTime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaUtilCalendar *)constructWithInt:(jint)year
                               withInt:(jint)month {
  return ComMdimensionJchronicUtilsTime_constructWithInt_withInt_(year, month);
}

+ (JavaUtilCalendar *)constructWithInt:(jint)year
                               withInt:(jint)month
                               withInt:(jint)day {
  return ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(year, month, day);
}

+ (JavaUtilCalendar *)constructWithInt:(jint)year
                               withInt:(jint)month
                               withInt:(jint)day
                               withInt:(jint)hour {
  return ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(year, month, day, hour);
}

+ (JavaUtilCalendar *)constructWithInt:(jint)year
                               withInt:(jint)month
                               withInt:(jint)day
                               withInt:(jint)hour
                               withInt:(jint)minute {
  return ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(year, month, day, hour, minute);
}

+ (JavaUtilCalendar *)constructWithInt:(jint)year
                               withInt:(jint)month
                               withInt:(jint)day
                               withInt:(jint)hour
                               withInt:(jint)minute
                               withInt:(jint)second {
  return ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(year, month, day, hour, minute, second);
}

+ (JavaUtilCalendar *)constructWithInt:(jint)year
                               withInt:(jint)month
                               withInt:(jint)day
                               withInt:(jint)hour
                               withInt:(jint)minute
                               withInt:(jint)second
                               withInt:(jint)millisecond {
  return ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(year, month, day, hour, minute, second, millisecond);
}

+ (JavaUtilCalendar *)yWithJavaUtilCalendar:(JavaUtilCalendar *)basis {
  return ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_(basis);
}

+ (JavaUtilCalendar *)yJan1WithJavaUtilCalendar:(JavaUtilCalendar *)basis {
  return ComMdimensionJchronicUtilsTime_yJan1WithJavaUtilCalendar_(basis);
}

+ (JavaUtilCalendar *)yWithJavaUtilCalendar:(JavaUtilCalendar *)basis
                                    withInt:(jint)month {
  return ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_(basis, month);
}

+ (JavaUtilCalendar *)yWithJavaUtilCalendar:(JavaUtilCalendar *)basis
                                    withInt:(jint)month
                                    withInt:(jint)day {
  return ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_withInt_(basis, month, day);
}

+ (JavaUtilCalendar *)ymWithJavaUtilCalendar:(JavaUtilCalendar *)basis {
  return ComMdimensionJchronicUtilsTime_ymWithJavaUtilCalendar_(basis);
}

+ (JavaUtilCalendar *)ymdWithJavaUtilCalendar:(JavaUtilCalendar *)basis {
  return ComMdimensionJchronicUtilsTime_ymdWithJavaUtilCalendar_(basis);
}

+ (JavaUtilCalendar *)ymdhWithJavaUtilCalendar:(JavaUtilCalendar *)basis {
  return ComMdimensionJchronicUtilsTime_ymdhWithJavaUtilCalendar_(basis);
}

+ (JavaUtilCalendar *)ymdhmWithJavaUtilCalendar:(JavaUtilCalendar *)basis {
  return ComMdimensionJchronicUtilsTime_ymdhmWithJavaUtilCalendar_(basis);
}

+ (JavaUtilCalendar *)cloneAndAddWithJavaUtilCalendar:(JavaUtilCalendar *)basis
                                              withInt:(jint)field
                                             withLong:(jlong)amount {
  return ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(basis, field, amount);
}

@end

void ComMdimensionJchronicUtilsTime_init(ComMdimensionJchronicUtilsTime *self) {
  NSObject_init(self);
}

ComMdimensionJchronicUtilsTime *new_ComMdimensionJchronicUtilsTime_init() {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicUtilsTime, init)
}

ComMdimensionJchronicUtilsTime *create_ComMdimensionJchronicUtilsTime_init() {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicUtilsTime, init)
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_constructWithInt_withInt_(jint year, jint month) {
  ComMdimensionJchronicUtilsTime_initialize();
  if (year <= 1900) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"Illegal year '", year, '\''));
  }
  JavaUtilCalendar *cal = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(cal)) clear];
  [cal setWithInt:JavaUtilCalendar_YEAR withInt:year];
  [cal setWithInt:JavaUtilCalendar_MONTH withInt:month - 1];
  return cal;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(jint year, jint month, jint day) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *cal = ComMdimensionJchronicUtilsTime_constructWithInt_withInt_(year, month);
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:day];
  return cal;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(jint year, jint month, jint day, jint hour) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *cal = ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(year, month, day);
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:hour];
  return cal;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(jint year, jint month, jint day, jint hour, jint minute) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *cal = ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(year, month, day, hour);
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:JavaUtilCalendar_MINUTE withInt:minute];
  return cal;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint month, jint day, jint hour, jint minute, jint second) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *cal = ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(year, month, day, hour, minute);
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:JavaUtilCalendar_SECOND withInt:second];
  return cal;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint month, jint day, jint hour, jint minute, jint second, jint millisecond) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *cal = ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(year, month, day, hour, minute, second);
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:JavaUtilCalendar_MILLISECOND withInt:millisecond];
  return cal;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_(JavaUtilCalendar *basis) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *clone = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(clone)) clear];
  [clone setWithInt:JavaUtilCalendar_YEAR withInt:[((JavaUtilCalendar *) nil_chk(basis)) getWithInt:JavaUtilCalendar_YEAR]];
  return clone;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_yJan1WithJavaUtilCalendar_(JavaUtilCalendar *basis) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *clone = ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_withInt_(basis, 1, 1);
  return clone;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_(JavaUtilCalendar *basis, jint month) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *clone = ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_(basis);
  [((JavaUtilCalendar *) nil_chk(clone)) setWithInt:JavaUtilCalendar_MONTH withInt:month - 1];
  return clone;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_withInt_(JavaUtilCalendar *basis, jint month, jint day) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *clone = ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_withInt_(basis, month);
  [((JavaUtilCalendar *) nil_chk(clone)) setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:day];
  return clone;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_ymWithJavaUtilCalendar_(JavaUtilCalendar *basis) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *clone = ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_(basis);
  [((JavaUtilCalendar *) nil_chk(clone)) setWithInt:JavaUtilCalendar_MONTH withInt:[((JavaUtilCalendar *) nil_chk(basis)) getWithInt:JavaUtilCalendar_MONTH]];
  return clone;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_ymdWithJavaUtilCalendar_(JavaUtilCalendar *basis) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *clone = ComMdimensionJchronicUtilsTime_ymWithJavaUtilCalendar_(basis);
  [((JavaUtilCalendar *) nil_chk(clone)) setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:[((JavaUtilCalendar *) nil_chk(basis)) getWithInt:JavaUtilCalendar_DAY_OF_MONTH]];
  return clone;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_ymdhWithJavaUtilCalendar_(JavaUtilCalendar *basis) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *clone = ComMdimensionJchronicUtilsTime_ymdWithJavaUtilCalendar_(basis);
  [((JavaUtilCalendar *) nil_chk(clone)) setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:[((JavaUtilCalendar *) nil_chk(basis)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY]];
  return clone;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_ymdhmWithJavaUtilCalendar_(JavaUtilCalendar *basis) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *clone = ComMdimensionJchronicUtilsTime_ymdhWithJavaUtilCalendar_(basis);
  [((JavaUtilCalendar *) nil_chk(clone)) setWithInt:JavaUtilCalendar_MINUTE withInt:[((JavaUtilCalendar *) nil_chk(basis)) getWithInt:JavaUtilCalendar_MINUTE]];
  return clone;
}

JavaUtilCalendar *ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(JavaUtilCalendar *basis, jint field, jlong amount) {
  ComMdimensionJchronicUtilsTime_initialize();
  JavaUtilCalendar *next = (JavaUtilCalendar *) cast_chk([((JavaUtilCalendar *) nil_chk(basis)) java_clone], [JavaUtilCalendar class]);
  [((JavaUtilCalendar *) nil_chk(next)) addWithInt:field withInt:(jint) amount];
  return next;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicUtilsTime)
