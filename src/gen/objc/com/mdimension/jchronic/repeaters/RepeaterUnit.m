//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jchronic/src/main/java/com/mdimension/jchronic/repeaters/RepeaterUnit.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/repeaters/Repeater.h"
#include "com/mdimension/jchronic/repeaters/RepeaterUnit.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_YEAR_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_YEAR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, YEAR_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_SEASON_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_SEASON_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, SEASON_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_MONTH_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_MONTH_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, MONTH_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_FORTNIGHT_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_FORTNIGHT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, FORTNIGHT_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_WEEK_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_WEEK_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, WEEK_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_WEEKEND_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_WEEKEND_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, WEEKEND_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_DAY_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_DAY_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, DAY_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_HOUR_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_HOUR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, HOUR_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_MINUTE_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_MINUTE_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, MINUTE_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_get_SECOND_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterUnit_SECOND_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterUnit, SECOND_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static void ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_initWithNSString_withInt_(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(ComMdimensionJchronicRepeatersRepeaterUnit)

@implementation ComMdimensionJchronicRepeatersRepeaterUnit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComMdimensionJchronicRepeatersRepeaterUnit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComMdimensionJchronicRepeatersRepeaterUnit *)scanWithComMdimensionJchronicUtilsToken:(ComMdimensionJchronicUtilsToken *)token {
  return ComMdimensionJchronicRepeatersRepeaterUnit_scanWithComMdimensionJchronicUtilsToken_(token);
}

+ (void)initialize {
  if (self == [ComMdimensionJchronicRepeatersRepeaterUnit class]) {
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_YEAR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^years?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_SEASON_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^seasons?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_MONTH_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^months?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_FORTNIGHT_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^fortnights?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_WEEK_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^weeks?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_WEEKEND_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^weekends?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_DAY_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^days?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_HOUR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^hours?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_MINUTE_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^minutes?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterUnit_SECOND_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^seconds?$"));
    J2OBJC_SET_INITIALIZED(ComMdimensionJchronicRepeatersRepeaterUnit)
  }
}

@end

void ComMdimensionJchronicRepeatersRepeaterUnit_init(ComMdimensionJchronicRepeatersRepeaterUnit *self) {
  ComMdimensionJchronicRepeatersRepeater_initWithId_(self, nil);
}

ComMdimensionJchronicRepeatersRepeaterUnit *ComMdimensionJchronicRepeatersRepeaterUnit_scanWithComMdimensionJchronicUtilsToken_(ComMdimensionJchronicUtilsToken *token) {
  ComMdimensionJchronicRepeatersRepeaterUnit_initialize();
  @try {
    id<JavaUtilMap> scanner = create_JavaUtilHashMap_init();
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_YEAR_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, YEAR)];
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_SEASON_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, SEASON)];
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_MONTH_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, MONTH)];
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_FORTNIGHT_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, FORTNIGHT)];
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_WEEK_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, WEEK)];
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_WEEKEND_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, WEEKEND)];
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_DAY_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, DAY)];
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_HOUR_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, HOUR)];
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_MINUTE_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, MINUTE)];
    [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterUnit_SECOND_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName, SECOND)];
    for (JavaUtilRegexPattern * __strong scannerItem in nil_chk([scanner keySet])) {
      if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(scannerItem)) matcherWithJavaLangCharSequence:[((ComMdimensionJchronicUtilsToken *) nil_chk(token)) getWord]])) matches]) {
        ComMdimensionJchronicRepeatersRepeaterUnit_UnitName *unitNameEnum = [scanner getWithId:scannerItem];
        NSString *unitName = [((ComMdimensionJchronicRepeatersRepeaterUnit_UnitName *) nil_chk(unitNameEnum)) name];
        NSString *capitalizedUnitName = JreStrcat("$$", [((NSString *) nil_chk(unitName)) java_substring:0 endIndex:1], [((NSString *) nil_chk([unitName java_substring:1])) lowercaseString]);
        NSString *repeaterClassName = JreStrcat("$$", @"com.mdimension.jchronic.repeaters.Repeater", capitalizedUnitName);
        ComMdimensionJchronicRepeatersRepeaterUnit *repeater = [((IOSClass *) nil_chk([((IOSClass *) nil_chk(IOSClass_forName_(repeaterClassName))) asSubclass:ComMdimensionJchronicRepeatersRepeaterUnit_class_()])) newInstance];
        return repeater;
      }
    }
    return nil;
  }
  @catch (JavaLangThrowable *t) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Failed to create RepeaterUnit.", t);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeaterUnit)

J2OBJC_INITIALIZED_DEFN(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName)

ComMdimensionJchronicRepeatersRepeaterUnit_UnitName *ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_values_[10];

@implementation ComMdimensionJchronicRepeatersRepeaterUnit_UnitName

+ (IOSObjectArray *)values {
  return ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_values();
}

+ (ComMdimensionJchronicRepeatersRepeaterUnit_UnitName *)valueOfWithNSString:(NSString *)name {
  return ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_valueOfWithNSString_(name);
}

+ (void)initialize {
  if (self == [ComMdimensionJchronicRepeatersRepeaterUnit_UnitName class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 10 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"YEAR", @"SEASON", @"MONTH", @"FORTNIGHT", @"WEEK", @"WEEKEND", @"DAY", @"HOUR", @"MINUTE", @"SECOND",
    };
    for (jint i = 0; i < 10; i++) {
      (ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName)
  }
}

@end

void ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_initWithNSString_withInt_(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_values() {
  ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_initialize();
  return [IOSObjectArray arrayWithObjects:ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_values_ count:10 type:ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_class_()];
}

ComMdimensionJchronicRepeatersRepeaterUnit_UnitName *ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_valueOfWithNSString_(NSString *name) {
  ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_initialize();
  for (int i = 0; i < 10; i++) {
    ComMdimensionJchronicRepeatersRepeaterUnit_UnitName *e = ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComMdimensionJchronicRepeatersRepeaterUnit_UnitName *ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_fromOrdinal(NSUInteger ordinal) {
  ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_initialize();
  if (ordinal >= 10) {
    return nil;
  }
  return ComMdimensionJchronicRepeatersRepeaterUnit_UnitName_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeaterUnit_UnitName)
