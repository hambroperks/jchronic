//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jchronic/src/main/java/com/mdimension/jchronic/repeaters/RepeaterTime.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/Options.h"
#include "com/mdimension/jchronic/repeaters/Repeater.h"
#include "com/mdimension/jchronic/repeaters/RepeaterDay.h"
#include "com/mdimension/jchronic/repeaters/RepeaterTime.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/StringUtils.h"
#include "com/mdimension/jchronic/utils/Tick.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/util/Calendar.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComMdimensionJchronicRepeatersRepeaterTime () {
 @public
  JavaUtilCalendar *_currentTime_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicRepeatersRepeaterTime, _currentTime_, JavaUtilCalendar *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterTime_get_TIME_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterTime_TIME_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterTime, TIME_PATTERN, JavaUtilRegexPattern *)

J2OBJC_INITIALIZED_DEFN(ComMdimensionJchronicRepeatersRepeaterTime)

@implementation ComMdimensionJchronicRepeatersRepeaterTime

- (instancetype)initWithNSString:(NSString *)time {
  ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(self, time);
  return self;
}

- (ComMdimensionJchronicUtilsSpan *)_nextSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  jint halfDay = ComMdimensionJchronicRepeatersRepeaterDay_DAY_SECONDS / 2;
  jint fullDay = ComMdimensionJchronicRepeatersRepeaterDay_DAY_SECONDS;
  JavaUtilCalendar *now = [self getNow];
  ComMdimensionJchronicUtilsTick *tick = [self getType];
  jboolean first = false;
  if (_currentTime_ == nil) {
    first = true;
    JavaUtilCalendar *midnight = ComMdimensionJchronicUtilsTime_ymdWithJavaUtilCalendar_(now);
    JavaUtilCalendar *yesterdayMidnight = ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(midnight, JavaUtilCalendar_SECOND, -fullDay);
    JavaUtilCalendar *tomorrowMidnight = ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(midnight, JavaUtilCalendar_SECOND, fullDay);
    jboolean done = false;
    if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) {
      if ([((ComMdimensionJchronicUtilsTick *) nil_chk(tick)) isAmbiguous]) {
        id<JavaUtilList> futureDates = create_JavaUtilLinkedList_init();
        [futureDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(midnight, JavaUtilCalendar_SECOND, [tick intValue])];
        [futureDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(midnight, JavaUtilCalendar_SECOND, halfDay + [tick intValue])];
        [futureDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(tomorrowMidnight, JavaUtilCalendar_SECOND, [tick intValue])];
        for (JavaUtilCalendar * __strong futureDate in futureDates) {
          if ([((JavaUtilCalendar *) nil_chk(futureDate)) afterWithId:now] || [futureDate isEqual:now]) {
            JreStrongAssign(&_currentTime_, futureDate);
            done = true;
            break;
          }
        }
      }
      else {
        id<JavaUtilList> futureDates = create_JavaUtilLinkedList_init();
        [futureDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(midnight, JavaUtilCalendar_SECOND, [tick intValue])];
        [futureDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(tomorrowMidnight, JavaUtilCalendar_SECOND, [tick intValue])];
        for (JavaUtilCalendar * __strong futureDate in futureDates) {
          if ([((JavaUtilCalendar *) nil_chk(futureDate)) afterWithId:now] || [futureDate isEqual:now]) {
            JreStrongAssign(&_currentTime_, futureDate);
            done = true;
            break;
          }
        }
      }
    }
    else {
      if ([((ComMdimensionJchronicUtilsTick *) nil_chk(tick)) isAmbiguous]) {
        id<JavaUtilList> pastDates = create_JavaUtilLinkedList_init();
        [pastDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(midnight, JavaUtilCalendar_SECOND, halfDay + [tick intValue])];
        [pastDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(midnight, JavaUtilCalendar_SECOND, [tick intValue])];
        [pastDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(yesterdayMidnight, JavaUtilCalendar_SECOND, [tick intValue] * 2)];
        for (JavaUtilCalendar * __strong pastDate in pastDates) {
          if ([((JavaUtilCalendar *) nil_chk(pastDate)) beforeWithId:now] || [pastDate isEqual:now]) {
            JreStrongAssign(&_currentTime_, pastDate);
            done = true;
            break;
          }
        }
      }
      else {
        id<JavaUtilList> pastDates = create_JavaUtilLinkedList_init();
        [pastDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(midnight, JavaUtilCalendar_SECOND, [tick intValue])];
        [pastDates addWithId:ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(yesterdayMidnight, JavaUtilCalendar_SECOND, [tick intValue])];
        for (JavaUtilCalendar * __strong pastDate in pastDates) {
          if ([((JavaUtilCalendar *) nil_chk(pastDate)) beforeWithId:now] || [pastDate isEqual:now]) {
            JreStrongAssign(&_currentTime_, pastDate);
            done = true;
            break;
          }
        }
      }
    }
    if (!done && _currentTime_ == nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Current time cannot be null at this point.");
    }
  }
  if (!first) {
    jint increment = ([((ComMdimensionJchronicUtilsTick *) nil_chk(tick)) isAmbiguous]) ? halfDay : fullDay;
    jint direction = (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) ? 1 : -1;
    [((JavaUtilCalendar *) nil_chk(_currentTime_)) addWithInt:JavaUtilCalendar_SECOND withInt:direction * increment];
  }
  return create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(_currentTime_, ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(_currentTime_, JavaUtilCalendar_SECOND, [self getWidth]));
}

- (ComMdimensionJchronicUtilsSpan *)_thisSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, NONE)) {
    pointer = JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE);
  }
  return [self nextSpanWithComMdimensionJchronicTagsPointer_PointerType:pointer];
}

- (ComMdimensionJchronicUtilsSpan *)getOffsetWithComMdimensionJchronicUtilsSpan:(ComMdimensionJchronicUtilsSpan *)span
                                                                        withInt:(jint)amount
                               withComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Not implemented.");
}

- (jint)getWidth {
  return 1;
}

- (NSString *)description {
  return JreStrcat("$$@", [super description], @"-time-", [self getType]);
}

+ (ComMdimensionJchronicRepeatersRepeaterTime *)scanWithComMdimensionJchronicUtilsToken:(ComMdimensionJchronicUtilsToken *)token
                                                                       withJavaUtilList:(id<JavaUtilList>)tokens
                                                       withComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options {
  return ComMdimensionJchronicRepeatersRepeaterTime_scanWithComMdimensionJchronicUtilsToken_withJavaUtilList_withComMdimensionJchronicOptions_(token, tokens, options);
}

- (void)dealloc {
  RELEASE_(_currentTime_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComMdimensionJchronicRepeatersRepeaterTime class]) {
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterTime_TIME_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^\\d{1,2}(:?\\d{2})?([\\.:]?\\d{2})?$"));
    J2OBJC_SET_INITIALIZED(ComMdimensionJchronicRepeatersRepeaterTime)
  }
}

@end

void ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(ComMdimensionJchronicRepeatersRepeaterTime *self, NSString *time) {
  ComMdimensionJchronicRepeatersRepeater_initWithId_(self, nil);
  NSString *t = [((NSString *) nil_chk(time)) java_replaceAll:@":" withReplacement:@""];
  ComMdimensionJchronicUtilsTick *type;
  jint length = [((NSString *) nil_chk(t)) java_length];
  if (length <= 2) {
    jint hours = JavaLangInteger_parseIntWithNSString_(t);
    jint hoursInSeconds = hours * 60 * 60;
    if (hours == 12) {
      type = create_ComMdimensionJchronicUtilsTick_initWithInt_withBoolean_(0 * 60 * 60, true);
    }
    else {
      type = create_ComMdimensionJchronicUtilsTick_initWithInt_withBoolean_(hoursInSeconds, true);
    }
  }
  else if (length == 3) {
    jint hoursInSeconds = JavaLangInteger_parseIntWithNSString_([t java_substring:0 endIndex:1]) * 60 * 60;
    jint minutesInSeconds = JavaLangInteger_parseIntWithNSString_([t java_substring:1]) * 60;
    type = create_ComMdimensionJchronicUtilsTick_initWithInt_withBoolean_(hoursInSeconds + minutesInSeconds, true);
  }
  else if (length == 4) {
    jboolean ambiguous = ([time java_contains:@":"] && JavaLangInteger_parseIntWithNSString_([t java_substring:0 endIndex:1]) != 0 && JavaLangInteger_parseIntWithNSString_([t java_substring:0 endIndex:2]) <= 12);
    jint hours = JavaLangInteger_parseIntWithNSString_([t java_substring:0 endIndex:2]);
    jint hoursInSeconds = hours * 60 * 60;
    jint minutesInSeconds = JavaLangInteger_parseIntWithNSString_([t java_substring:2]) * 60;
    if (hours == 12) {
      type = create_ComMdimensionJchronicUtilsTick_initWithInt_withBoolean_(0 * 60 * 60 + minutesInSeconds, ambiguous);
    }
    else {
      type = create_ComMdimensionJchronicUtilsTick_initWithInt_withBoolean_(hoursInSeconds + minutesInSeconds, ambiguous);
    }
  }
  else if (length == 5) {
    jint hoursInSeconds = JavaLangInteger_parseIntWithNSString_([t java_substring:0 endIndex:1]) * 60 * 60;
    jint minutesInSeconds = JavaLangInteger_parseIntWithNSString_([t java_substring:1 endIndex:3]) * 60;
    jint seconds = JavaLangInteger_parseIntWithNSString_([t java_substring:3]);
    type = create_ComMdimensionJchronicUtilsTick_initWithInt_withBoolean_(hoursInSeconds + minutesInSeconds + seconds, true);
  }
  else if (length == 6) {
    jboolean ambiguous = ([time java_contains:@":"] && JavaLangInteger_parseIntWithNSString_([t java_substring:0 endIndex:1]) != 0 && JavaLangInteger_parseIntWithNSString_([t java_substring:0 endIndex:2]) <= 12);
    jint hours = JavaLangInteger_parseIntWithNSString_([t java_substring:0 endIndex:2]);
    jint hoursInSeconds = hours * 60 * 60;
    jint minutesInSeconds = JavaLangInteger_parseIntWithNSString_([t java_substring:2 endIndex:4]) * 60;
    jint seconds = JavaLangInteger_parseIntWithNSString_([t java_substring:4 endIndex:6]);
    if (hours == 12) {
      type = create_ComMdimensionJchronicUtilsTick_initWithInt_withBoolean_(0 * 60 * 60 + minutesInSeconds + seconds, ambiguous);
    }
    else {
      type = create_ComMdimensionJchronicUtilsTick_initWithInt_withBoolean_(hoursInSeconds + minutesInSeconds + seconds, ambiguous);
    }
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Time cannot exceed six digits");
  }
  [self setTypeWithId:type];
}

ComMdimensionJchronicRepeatersRepeaterTime *new_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(NSString *time) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicRepeatersRepeaterTime, initWithNSString_, time)
}

ComMdimensionJchronicRepeatersRepeaterTime *create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(NSString *time) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicRepeatersRepeaterTime, initWithNSString_, time)
}

ComMdimensionJchronicRepeatersRepeaterTime *ComMdimensionJchronicRepeatersRepeaterTime_scanWithComMdimensionJchronicUtilsToken_withJavaUtilList_withComMdimensionJchronicOptions_(ComMdimensionJchronicUtilsToken *token, id<JavaUtilList> tokens, ComMdimensionJchronicOptions *options) {
  ComMdimensionJchronicRepeatersRepeaterTime_initialize();
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComMdimensionJchronicRepeatersRepeaterTime_TIME_PATTERN)) matcherWithJavaLangCharSequence:[((ComMdimensionJchronicUtilsToken *) nil_chk(token)) getWord]])) matches]) {
    return create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_([token getWord]);
  }
  JavaLangInteger *intStrValue = ComMdimensionJchronicUtilsStringUtils_integerValueWithNSString_([token getWord]);
  if (intStrValue != nil) {
    return create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_([intStrValue description]);
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeaterTime)
