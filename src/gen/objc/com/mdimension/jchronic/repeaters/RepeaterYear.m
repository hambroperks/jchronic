//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jchronic/src/main/java/com/mdimension/jchronic/repeaters/RepeaterYear.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/repeaters/RepeaterUnit.h"
#include "com/mdimension/jchronic/repeaters/RepeaterYear.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Calendar.h"

@interface ComMdimensionJchronicRepeatersRepeaterYear () {
 @public
  JavaUtilCalendar *_currentYearStart_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicRepeatersRepeaterYear, _currentYearStart_, JavaUtilCalendar *)

@implementation ComMdimensionJchronicRepeatersRepeaterYear

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComMdimensionJchronicRepeatersRepeaterYear_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComMdimensionJchronicUtilsSpan *)_nextSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  if (_currentYearStart_ == nil) {
    if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) {
      JreStrongAssign(&_currentYearStart_, ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_([self getNow]), JavaUtilCalendar_YEAR, 1));
    }
    else if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)) {
      JreStrongAssign(&_currentYearStart_, ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsTime_yWithJavaUtilCalendar_([self getNow]), JavaUtilCalendar_YEAR, -1));
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Unable to handle pointer ", pointer, '.'));
    }
  }
  else {
    jint direction = (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) ? 1 : -1;
    [_currentYearStart_ addWithInt:JavaUtilCalendar_YEAR withInt:direction];
  }
  return create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withInt_withLong_(_currentYearStart_, JavaUtilCalendar_YEAR, 1);
}

- (ComMdimensionJchronicUtilsSpan *)_thisSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  JavaUtilCalendar *yearStart;
  JavaUtilCalendar *yearEnd;
  if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) {
    yearStart = ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsTime_ymdWithJavaUtilCalendar_([self getNow]), JavaUtilCalendar_DAY_OF_MONTH, 1);
    yearEnd = ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsTime_yJan1WithJavaUtilCalendar_([self getNow]), JavaUtilCalendar_YEAR, 1);
  }
  else if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)) {
    yearStart = ComMdimensionJchronicUtilsTime_yJan1WithJavaUtilCalendar_([self getNow]);
    yearEnd = ComMdimensionJchronicUtilsTime_ymdWithJavaUtilCalendar_([self getNow]);
  }
  else if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, NONE)) {
    yearStart = ComMdimensionJchronicUtilsTime_yJan1WithJavaUtilCalendar_([self getNow]);
    yearEnd = ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_(ComMdimensionJchronicUtilsTime_yJan1WithJavaUtilCalendar_([self getNow]), JavaUtilCalendar_YEAR, 1);
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Unable to handle pointer ", pointer, '.'));
  }
  return create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(yearStart, yearEnd);
}

- (ComMdimensionJchronicUtilsSpan *)getOffsetWithComMdimensionJchronicUtilsSpan:(ComMdimensionJchronicUtilsSpan *)span
                                                                        withInt:(jint)amount
                               withComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  jint direction = (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) ? 1 : -1;
  JavaUtilCalendar *newBegin = ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_([((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) getBeginCalendar], JavaUtilCalendar_YEAR, amount * direction);
  JavaUtilCalendar *newEnd = ComMdimensionJchronicUtilsTime_cloneAndAddWithJavaUtilCalendar_withInt_withLong_([span getEndCalendar], JavaUtilCalendar_YEAR, amount * direction);
  return create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(newBegin, newEnd);
}

- (jint)getWidth {
  return (365 * 24 * 60 * 60);
}

- (NSString *)description {
  return JreStrcat("$$", [super description], @"-year");
}

- (void)dealloc {
  RELEASE_(_currentYearStart_);
  [super dealloc];
}

@end

void ComMdimensionJchronicRepeatersRepeaterYear_init(ComMdimensionJchronicRepeatersRepeaterYear *self) {
  ComMdimensionJchronicRepeatersRepeaterUnit_init(self);
}

ComMdimensionJchronicRepeatersRepeaterYear *new_ComMdimensionJchronicRepeatersRepeaterYear_init() {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicRepeatersRepeaterYear, init)
}

ComMdimensionJchronicRepeatersRepeaterYear *create_ComMdimensionJchronicRepeatersRepeaterYear_init() {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicRepeatersRepeaterYear, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeaterYear)
