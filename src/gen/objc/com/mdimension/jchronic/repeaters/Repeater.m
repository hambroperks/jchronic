//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/main/java/com/mdimension/jchronic/repeaters/Repeater.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/Options.h"
#include "com/mdimension/jchronic/repeaters/EnumRepeaterDayPortion.h"
#include "com/mdimension/jchronic/repeaters/Repeater.h"
#include "com/mdimension/jchronic/repeaters/RepeaterDayName.h"
#include "com/mdimension/jchronic/repeaters/RepeaterDayPortion.h"
#include "com/mdimension/jchronic/repeaters/RepeaterMonthName.h"
#include "com/mdimension/jchronic/repeaters/RepeaterTime.h"
#include "com/mdimension/jchronic/repeaters/RepeaterUnit.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/tags/Tag.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/util/Calendar.h"
#include "java/util/List.h"

@implementation ComMdimensionJchronicRepeatersRepeater

- (instancetype __nonnull)initWithId:(id)type {
  ComMdimensionJchronicRepeatersRepeater_initWithId_(self, type);
  return self;
}

+ (id<JavaUtilList>)scanWithJavaUtilList:(id<JavaUtilList>)tokens {
  return ComMdimensionJchronicRepeatersRepeater_scanWithJavaUtilList_(tokens);
}

+ (id<JavaUtilList>)scanWithJavaUtilList:(id<JavaUtilList>)tokens
        withComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options {
  return ComMdimensionJchronicRepeatersRepeater_scanWithJavaUtilList_withComMdimensionJchronicOptions_(tokens, options);
}

- (jint)compareToWithId:(ComMdimensionJchronicRepeatersRepeater *)other {
  return [JavaLangInteger_valueOfWithInt_([self getWidth]) compareToWithId:JavaLangInteger_valueOfWithInt_([((ComMdimensionJchronicRepeatersRepeater *) nil_chk(other)) getWidth])];
}

- (jint)getWidth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComMdimensionJchronicUtilsSpan *)nextSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  if ([self getNow] == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Start point must be set before calling #next");
  }
  return [self _nextSpanWithComMdimensionJchronicTagsPointer_PointerType:pointer];
}

- (ComMdimensionJchronicUtilsSpan *)_nextSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComMdimensionJchronicUtilsSpan *)thisSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  if ([self getNow] == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Start point must be set before calling #this");
  }
  return [self _thisSpanWithComMdimensionJchronicTagsPointer_PointerType:pointer];
}

- (ComMdimensionJchronicUtilsSpan *)_thisSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComMdimensionJchronicUtilsSpan *)getOffsetWithComMdimensionJchronicUtilsSpan:(ComMdimensionJchronicUtilsSpan *)span
                                                                        withInt:(jint)amount
                               withComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  return @"repeater";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 2, 5, -1, 6, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x404, 12, 11, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x1, 13, 11, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x404, 14, 11, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x401, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(scanWithJavaUtilList:);
  methods[2].selector = @selector(scanWithJavaUtilList:withComMdimensionJchronicOptions:);
  methods[3].selector = @selector(compareToWithId:);
  methods[4].selector = @selector(getWidth);
  methods[5].selector = @selector(nextSpanWithComMdimensionJchronicTagsPointer_PointerType:);
  methods[6].selector = @selector(_nextSpanWithComMdimensionJchronicTagsPointer_PointerType:);
  methods[7].selector = @selector(thisSpanWithComMdimensionJchronicTagsPointer_PointerType:);
  methods[8].selector = @selector(_thisSpanWithComMdimensionJchronicTagsPointer_PointerType:);
  methods[9].selector = @selector(getOffsetWithComMdimensionJchronicUtilsSpan:withInt:withComMdimensionJchronicTagsPointer_PointerType:);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSObject;", "(TT;)V", "scan", "LJavaUtilList;", "(Ljava/util/List<Lcom/mdimension/jchronic/utils/Token;>;)Ljava/util/List<Lcom/mdimension/jchronic/utils/Token;>;", "LJavaUtilList;LComMdimensionJchronicOptions;", "(Ljava/util/List<Lcom/mdimension/jchronic/utils/Token;>;Lcom/mdimension/jchronic/Options;)Ljava/util/List<Lcom/mdimension/jchronic/utils/Token;>;", "compareTo", "LComMdimensionJchronicRepeatersRepeater;", "(Lcom/mdimension/jchronic/repeaters/Repeater<*>;)I", "nextSpan", "LComMdimensionJchronicTagsPointer_PointerType;", "_nextSpan", "thisSpan", "_thisSpan", "getOffset", "LComMdimensionJchronicUtilsSpan;ILComMdimensionJchronicTagsPointer_PointerType;", "toString", "<T:Ljava/lang/Object;>Lcom/mdimension/jchronic/tags/Tag<TT;>;Ljava/lang/Comparable<Lcom/mdimension/jchronic/repeaters/Repeater<*>;>;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicRepeatersRepeater = { "Repeater", "com.mdimension.jchronic.repeaters", ptrTable, methods, NULL, 7, 0x401, 11, 0, -1, -1, -1, 18, -1 };
  return &_ComMdimensionJchronicRepeatersRepeater;
}

@end

void ComMdimensionJchronicRepeatersRepeater_initWithId_(ComMdimensionJchronicRepeatersRepeater *self, id type) {
  ComMdimensionJchronicTagsTag_initWithId_(self, type);
}

id<JavaUtilList> ComMdimensionJchronicRepeatersRepeater_scanWithJavaUtilList_(id<JavaUtilList> tokens) {
  ComMdimensionJchronicRepeatersRepeater_initialize();
  return ComMdimensionJchronicRepeatersRepeater_scanWithJavaUtilList_withComMdimensionJchronicOptions_(tokens, create_ComMdimensionJchronicOptions_init());
}

id<JavaUtilList> ComMdimensionJchronicRepeatersRepeater_scanWithJavaUtilList_withComMdimensionJchronicOptions_(id<JavaUtilList> tokens, ComMdimensionJchronicOptions *options) {
  ComMdimensionJchronicRepeatersRepeater_initialize();
  for (ComMdimensionJchronicUtilsToken * __strong token in nil_chk(tokens)) {
    ComMdimensionJchronicTagsTag *t;
    t = ComMdimensionJchronicRepeatersRepeaterMonthName_scanWithComMdimensionJchronicUtilsToken_(token);
    if (t != nil) {
      [((ComMdimensionJchronicUtilsToken *) nil_chk(token)) tagWithComMdimensionJchronicTagsTag:t];
    }
    t = ComMdimensionJchronicRepeatersRepeaterDayName_scanWithComMdimensionJchronicUtilsToken_(token);
    if (t != nil) {
      [((ComMdimensionJchronicUtilsToken *) nil_chk(token)) tagWithComMdimensionJchronicTagsTag:t];
    }
    t = ComMdimensionJchronicRepeatersRepeaterDayPortion_scanWithComMdimensionJchronicUtilsToken_(token);
    if (t != nil) {
      [((ComMdimensionJchronicUtilsToken *) nil_chk(token)) tagWithComMdimensionJchronicTagsTag:t];
    }
    t = ComMdimensionJchronicRepeatersRepeaterTime_scanWithComMdimensionJchronicUtilsToken_withJavaUtilList_withComMdimensionJchronicOptions_(token, tokens, options);
    if (t != nil) {
      [((ComMdimensionJchronicUtilsToken *) nil_chk(token)) tagWithComMdimensionJchronicTagsTag:t];
    }
    t = ComMdimensionJchronicRepeatersRepeaterUnit_scanWithComMdimensionJchronicUtilsToken_(token);
    if (t != nil) {
      [((ComMdimensionJchronicUtilsToken *) nil_chk(token)) tagWithComMdimensionJchronicTagsTag:t];
    }
  }
  return tokens;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeater)
