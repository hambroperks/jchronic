//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jchronic/src/main/java/com/mdimension/jchronic/repeaters/RepeaterDayName.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/repeaters/Repeater.h"
#include "com/mdimension/jchronic/repeaters/RepeaterDayName.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Calendar.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComMdimensionJchronicRepeatersRepeaterDayName () {
 @public
  JavaUtilCalendar *_currentDayStart_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicRepeatersRepeaterDayName, _currentDayStart_, JavaUtilCalendar *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_MON_PATTERN();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_MON_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, MON_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_TUE_PATTERN();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_TUE_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, TUE_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_TUE_PATTERN_1();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_TUE_PATTERN_1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, TUE_PATTERN_1, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_WED_PATTERN_1();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_WED_PATTERN_1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, WED_PATTERN_1, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_WED_PATTERN_2();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_WED_PATTERN_2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, WED_PATTERN_2, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_THU_PATTERN_1();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_THU_PATTERN_1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, THU_PATTERN_1, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_THU_PATTERN_2();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_THU_PATTERN_2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, THU_PATTERN_2, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_FRI_PATTERN();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_FRI_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, FRI_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_SAT_PATTERN();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_SAT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, SAT_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_get_SUN_PATTERN();
static JavaUtilRegexPattern *ComMdimensionJchronicRepeatersRepeaterDayName_SUN_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicRepeatersRepeaterDayName, SUN_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static void ComMdimensionJchronicRepeatersRepeaterDayName_DayName_initWithNSString_withInt_(ComMdimensionJchronicRepeatersRepeaterDayName_DayName *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(ComMdimensionJchronicRepeatersRepeaterDayName)

@implementation ComMdimensionJchronicRepeatersRepeaterDayName

- (instancetype)initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName:(ComMdimensionJchronicRepeatersRepeaterDayName_DayName *)type {
  ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(self, type);
  return self;
}

- (ComMdimensionJchronicUtilsSpan *)_nextSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  jint direction = (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)) ? 1 : -1;
  if (_currentDayStart_ == nil) {
    JreStrongAssign(&_currentDayStart_, ComMdimensionJchronicUtilsTime_ymdWithJavaUtilCalendar_([self getNow]));
    [((JavaUtilCalendar *) nil_chk(_currentDayStart_)) addWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:direction];
    jint dayNum = [((ComMdimensionJchronicRepeatersRepeaterDayName_DayName *) nil_chk([self getType])) ordinal];
    while (([((JavaUtilCalendar *) nil_chk(_currentDayStart_)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK] - 1) != dayNum) {
      [((JavaUtilCalendar *) nil_chk(_currentDayStart_)) addWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:direction];
    }
  }
  else {
    [_currentDayStart_ addWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:direction * 7];
  }
  return create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withInt_withLong_(_currentDayStart_, JavaUtilCalendar_DAY_OF_MONTH, 1);
}

- (ComMdimensionJchronicUtilsSpan *)_thisSpanWithComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  if (pointer == JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, NONE)) {
    pointer = JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE);
  }
  return [super nextSpanWithComMdimensionJchronicTagsPointer_PointerType:pointer];
}

- (ComMdimensionJchronicUtilsSpan *)getOffsetWithComMdimensionJchronicUtilsSpan:(ComMdimensionJchronicUtilsSpan *)span
                                                                        withInt:(jint)amount
                               withComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Not implemented.");
}

- (jint)getWidth {
  return ComMdimensionJchronicRepeatersRepeaterDayName_DAY_SECONDS;
}

- (NSString *)description {
  return JreStrcat("$$@", [super description], @"-dayname-", [self getType]);
}

+ (ComMdimensionJchronicRepeatersRepeaterDayName *)scanWithComMdimensionJchronicUtilsToken:(ComMdimensionJchronicUtilsToken *)token {
  return ComMdimensionJchronicRepeatersRepeaterDayName_scanWithComMdimensionJchronicUtilsToken_(token);
}

- (void)dealloc {
  RELEASE_(_currentDayStart_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComMdimensionJchronicRepeatersRepeaterDayName class]) {
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_MON_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^m[ou]n(day)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_TUE_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^t(ue|eu|oo|u|)s(day)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_TUE_PATTERN_1, JavaUtilRegexPattern_compileWithNSString_(@"^tue$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_WED_PATTERN_1, JavaUtilRegexPattern_compileWithNSString_(@"^we(dnes|nds|nns)day$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_WED_PATTERN_2, JavaUtilRegexPattern_compileWithNSString_(@"^wed$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_THU_PATTERN_1, JavaUtilRegexPattern_compileWithNSString_(@"^th(urs|ers)day$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_THU_PATTERN_2, JavaUtilRegexPattern_compileWithNSString_(@"^thu$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_FRI_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^fr[iy](day)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_SAT_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^sat(t?[ue]rday)?$"));
    JreStrongAssign(&ComMdimensionJchronicRepeatersRepeaterDayName_SUN_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^su[nm](day)?$"));
    J2OBJC_SET_INITIALIZED(ComMdimensionJchronicRepeatersRepeaterDayName)
  }
}

@end

void ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(ComMdimensionJchronicRepeatersRepeaterDayName *self, ComMdimensionJchronicRepeatersRepeaterDayName_DayName *type) {
  ComMdimensionJchronicRepeatersRepeater_initWithId_(self, type);
}

ComMdimensionJchronicRepeatersRepeaterDayName *new_ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(ComMdimensionJchronicRepeatersRepeaterDayName_DayName *type) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicRepeatersRepeaterDayName, initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_, type)
}

ComMdimensionJchronicRepeatersRepeaterDayName *create_ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(ComMdimensionJchronicRepeatersRepeaterDayName_DayName *type) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicRepeatersRepeaterDayName, initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_, type)
}

ComMdimensionJchronicRepeatersRepeaterDayName *ComMdimensionJchronicRepeatersRepeaterDayName_scanWithComMdimensionJchronicUtilsToken_(ComMdimensionJchronicUtilsToken *token) {
  ComMdimensionJchronicRepeatersRepeaterDayName_initialize();
  id<JavaUtilMap> scanner = create_JavaUtilHashMap_init();
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_MON_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, MONDAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_TUE_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, TUESDAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_TUE_PATTERN_1 withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, TUESDAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_WED_PATTERN_1 withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, WEDNESDAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_WED_PATTERN_2 withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, WEDNESDAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_THU_PATTERN_1 withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, THURSDAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_THU_PATTERN_2 withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, THURSDAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_FRI_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, FRIDAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_SAT_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, SATURDAY)];
  [scanner putWithId:ComMdimensionJchronicRepeatersRepeaterDayName_SUN_PATTERN withId:JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, SUNDAY)];
  for (JavaUtilRegexPattern * __strong scannerItem in nil_chk([scanner keySet])) {
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(scannerItem)) matcherWithJavaLangCharSequence:[((ComMdimensionJchronicUtilsToken *) nil_chk(token)) getWord]])) matches]) {
      return create_ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_([scanner getWithId:scannerItem]);
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeaterDayName)

J2OBJC_INITIALIZED_DEFN(ComMdimensionJchronicRepeatersRepeaterDayName_DayName)

ComMdimensionJchronicRepeatersRepeaterDayName_DayName *ComMdimensionJchronicRepeatersRepeaterDayName_DayName_values_[7];

@implementation ComMdimensionJchronicRepeatersRepeaterDayName_DayName

+ (IOSObjectArray *)values {
  return ComMdimensionJchronicRepeatersRepeaterDayName_DayName_values();
}

+ (ComMdimensionJchronicRepeatersRepeaterDayName_DayName *)valueOfWithNSString:(NSString *)name {
  return ComMdimensionJchronicRepeatersRepeaterDayName_DayName_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [ComMdimensionJchronicRepeatersRepeaterDayName_DayName class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 7 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"SUNDAY", @"MONDAY", @"TUESDAY", @"WEDNESDAY", @"THURSDAY", @"FRIDAY", @"SATURDAY",
    };
    for (jint i = 0; i < 7; i++) {
      (ComMdimensionJchronicRepeatersRepeaterDayName_DayName_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComMdimensionJchronicRepeatersRepeaterDayName_DayName_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(ComMdimensionJchronicRepeatersRepeaterDayName_DayName)
  }
}

@end

void ComMdimensionJchronicRepeatersRepeaterDayName_DayName_initWithNSString_withInt_(ComMdimensionJchronicRepeatersRepeaterDayName_DayName *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComMdimensionJchronicRepeatersRepeaterDayName_DayName_values() {
  ComMdimensionJchronicRepeatersRepeaterDayName_DayName_initialize();
  return [IOSObjectArray arrayWithObjects:ComMdimensionJchronicRepeatersRepeaterDayName_DayName_values_ count:7 type:ComMdimensionJchronicRepeatersRepeaterDayName_DayName_class_()];
}

ComMdimensionJchronicRepeatersRepeaterDayName_DayName *ComMdimensionJchronicRepeatersRepeaterDayName_DayName_valueOfWithNSString_(NSString *name) {
  ComMdimensionJchronicRepeatersRepeaterDayName_DayName_initialize();
  for (int i = 0; i < 7; i++) {
    ComMdimensionJchronicRepeatersRepeaterDayName_DayName *e = ComMdimensionJchronicRepeatersRepeaterDayName_DayName_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComMdimensionJchronicRepeatersRepeaterDayName_DayName *ComMdimensionJchronicRepeatersRepeaterDayName_DayName_fromOrdinal(NSUInteger ordinal) {
  ComMdimensionJchronicRepeatersRepeaterDayName_DayName_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return ComMdimensionJchronicRepeatersRepeaterDayName_DayName_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeatersRepeaterDayName_DayName)
