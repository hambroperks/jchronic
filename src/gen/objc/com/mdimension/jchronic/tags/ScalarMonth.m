//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jchronic/src/main/java/com/mdimension/jchronic/tags/ScalarMonth.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/Options.h"
#include "com/mdimension/jchronic/tags/Scalar.h"
#include "com/mdimension/jchronic/tags/ScalarMonth.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/lang/Integer.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline JavaUtilRegexPattern *ComMdimensionJchronicTagsScalarMonth_get_MONTH_PATTERN(void);
static JavaUtilRegexPattern *ComMdimensionJchronicTagsScalarMonth_MONTH_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMdimensionJchronicTagsScalarMonth, MONTH_PATTERN, JavaUtilRegexPattern *)

J2OBJC_INITIALIZED_DEFN(ComMdimensionJchronicTagsScalarMonth)

@implementation ComMdimensionJchronicTagsScalarMonth

- (instancetype __nonnull)initWithJavaLangInteger:(JavaLangInteger *)type {
  ComMdimensionJchronicTagsScalarMonth_initWithJavaLangInteger_(self, type);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$@", [super description], @"-month-", [self getType]);
}

+ (ComMdimensionJchronicTagsScalarMonth *)scanWithComMdimensionJchronicUtilsToken:(ComMdimensionJchronicUtilsToken *)token
                                              withComMdimensionJchronicUtilsToken:(ComMdimensionJchronicUtilsToken *)postToken
                                                 withComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options {
  return ComMdimensionJchronicTagsScalarMonth_scanWithComMdimensionJchronicUtilsToken_withComMdimensionJchronicUtilsToken_withComMdimensionJchronicOptions_(token, postToken, options);
}

+ (void)initialize {
  if (self == [ComMdimensionJchronicTagsScalarMonth class]) {
    JreStrongAssign(&ComMdimensionJchronicTagsScalarMonth_MONTH_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^\\d\\d?$"));
    J2OBJC_SET_INITIALIZED(ComMdimensionJchronicTagsScalarMonth)
  }
}

@end

void ComMdimensionJchronicTagsScalarMonth_initWithJavaLangInteger_(ComMdimensionJchronicTagsScalarMonth *self, JavaLangInteger *type) {
  ComMdimensionJchronicTagsScalar_initWithJavaLangInteger_(self, type);
}

ComMdimensionJchronicTagsScalarMonth *new_ComMdimensionJchronicTagsScalarMonth_initWithJavaLangInteger_(JavaLangInteger *type) {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicTagsScalarMonth, initWithJavaLangInteger_, type)
}

ComMdimensionJchronicTagsScalarMonth *create_ComMdimensionJchronicTagsScalarMonth_initWithJavaLangInteger_(JavaLangInteger *type) {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicTagsScalarMonth, initWithJavaLangInteger_, type)
}

ComMdimensionJchronicTagsScalarMonth *ComMdimensionJchronicTagsScalarMonth_scanWithComMdimensionJchronicUtilsToken_withComMdimensionJchronicUtilsToken_withComMdimensionJchronicOptions_(ComMdimensionJchronicUtilsToken *token, ComMdimensionJchronicUtilsToken *postToken, ComMdimensionJchronicOptions *options) {
  ComMdimensionJchronicTagsScalarMonth_initialize();
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComMdimensionJchronicTagsScalarMonth_MONTH_PATTERN)) matcherWithJavaLangCharSequence:[((ComMdimensionJchronicUtilsToken *) nil_chk(token)) getWord]])) matches]) {
    jint scalarValue = JavaLangInteger_parseIntWithNSString_([token getWord]);
    if (!(scalarValue > 12 || (postToken != nil && [((id<JavaUtilSet>) nil_chk(JreLoadStatic(ComMdimensionJchronicTagsScalar, TIMES))) containsWithId:[postToken getWord]]))) {
      return create_ComMdimensionJchronicTagsScalarMonth_initWithJavaLangInteger_(JavaLangInteger_valueOfWithInt_(scalarValue));
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicTagsScalarMonth)
