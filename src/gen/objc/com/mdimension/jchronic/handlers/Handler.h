//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jchronic/src/main/java/com/mdimension/jchronic/handlers/Handler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComMdimensionJchronicHandlersHandler")
#ifdef RESTRICT_ComMdimensionJchronicHandlersHandler
#define INCLUDE_ALL_ComMdimensionJchronicHandlersHandler 0
#else
#define INCLUDE_ALL_ComMdimensionJchronicHandlersHandler 1
#endif
#undef RESTRICT_ComMdimensionJchronicHandlersHandler

#if !defined (ComMdimensionJchronicHandlersHandler_) && (INCLUDE_ALL_ComMdimensionJchronicHandlersHandler || defined(INCLUDE_ComMdimensionJchronicHandlersHandler))
#define ComMdimensionJchronicHandlersHandler_

@class ComMdimensionJchronicOptions;
@class ComMdimensionJchronicTagsPointer_PointerType;
@class ComMdimensionJchronicUtilsSpan;
@class IOSObjectArray;
@class JavaUtilCalendar;
@protocol ComMdimensionJchronicHandlersIHandler;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface ComMdimensionJchronicHandlersHandler : NSObject

#pragma mark Public

- (instancetype)initWithComMdimensionJchronicHandlersIHandler:(id<ComMdimensionJchronicHandlersIHandler>)handler
                                                  withBoolean:(jboolean)compatible
         withComMdimensionJchronicHandlersHandlerPatternArray:(IOSObjectArray *)patterns;

- (instancetype)initWithComMdimensionJchronicHandlersIHandler:(id<ComMdimensionJchronicHandlersIHandler>)handler
         withComMdimensionJchronicHandlersHandlerPatternArray:(IOSObjectArray *)patterns;

+ (ComMdimensionJchronicUtilsSpan *)dayOrTimeWithJavaUtilCalendar:(JavaUtilCalendar *)dayStart
                                                 withJavaUtilList:(id<JavaUtilList>)timeTokens
                                 withComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options;

+ (id<JavaUtilList>)dealiasAndDisambiguateTimesWithJavaUtilList:(id<JavaUtilList>)tokens
                               withComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options;

+ (id<JavaUtilMap>)definitions;

/*!
 @brief Recursively finds repeaters within other repeaters.
 Returns a Span representing the innermost time span
 or nil if no repeater union could be found
 */
+ (ComMdimensionJchronicUtilsSpan *)findWithinWithJavaUtilList:(id<JavaUtilList>)tags
                            withComMdimensionJchronicUtilsSpan:(ComMdimensionJchronicUtilsSpan *)span
              withComMdimensionJchronicTagsPointer_PointerType:(ComMdimensionJchronicTagsPointer_PointerType *)pointer
                              withComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options;

+ (ComMdimensionJchronicUtilsSpan *)getAnchorWithJavaUtilList:(id<JavaUtilList>)tokens
                             withComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options;

- (id<ComMdimensionJchronicHandlersIHandler>)getHandler;

+ (id<JavaUtilList>)getRepeatersWithJavaUtilList:(id<JavaUtilList>)tokens;

- (jboolean)isCompatibleWithComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options;

- (jboolean)matchWithJavaUtilList:(id<JavaUtilList>)tokens
                  withJavaUtilMap:(id<JavaUtilMap>)definitions;

+ (ComMdimensionJchronicUtilsSpan *)tokensToSpanWithJavaUtilList:(id<JavaUtilList>)tokens
                                withComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComMdimensionJchronicHandlersHandler)

FOUNDATION_EXPORT void ComMdimensionJchronicHandlersHandler_initWithComMdimensionJchronicHandlersIHandler_withComMdimensionJchronicHandlersHandlerPatternArray_(ComMdimensionJchronicHandlersHandler *self, id<ComMdimensionJchronicHandlersIHandler> handler, IOSObjectArray *patterns);

FOUNDATION_EXPORT ComMdimensionJchronicHandlersHandler *new_ComMdimensionJchronicHandlersHandler_initWithComMdimensionJchronicHandlersIHandler_withComMdimensionJchronicHandlersHandlerPatternArray_(id<ComMdimensionJchronicHandlersIHandler> handler, IOSObjectArray *patterns) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComMdimensionJchronicHandlersHandler *create_ComMdimensionJchronicHandlersHandler_initWithComMdimensionJchronicHandlersIHandler_withComMdimensionJchronicHandlersHandlerPatternArray_(id<ComMdimensionJchronicHandlersIHandler> handler, IOSObjectArray *patterns);

FOUNDATION_EXPORT void ComMdimensionJchronicHandlersHandler_initWithComMdimensionJchronicHandlersIHandler_withBoolean_withComMdimensionJchronicHandlersHandlerPatternArray_(ComMdimensionJchronicHandlersHandler *self, id<ComMdimensionJchronicHandlersIHandler> handler, jboolean compatible, IOSObjectArray *patterns);

FOUNDATION_EXPORT ComMdimensionJchronicHandlersHandler *new_ComMdimensionJchronicHandlersHandler_initWithComMdimensionJchronicHandlersIHandler_withBoolean_withComMdimensionJchronicHandlersHandlerPatternArray_(id<ComMdimensionJchronicHandlersIHandler> handler, jboolean compatible, IOSObjectArray *patterns) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComMdimensionJchronicHandlersHandler *create_ComMdimensionJchronicHandlersHandler_initWithComMdimensionJchronicHandlersIHandler_withBoolean_withComMdimensionJchronicHandlersHandlerPatternArray_(id<ComMdimensionJchronicHandlersIHandler> handler, jboolean compatible, IOSObjectArray *patterns);

FOUNDATION_EXPORT id<JavaUtilMap> ComMdimensionJchronicHandlersHandler_definitions();

FOUNDATION_EXPORT ComMdimensionJchronicUtilsSpan *ComMdimensionJchronicHandlersHandler_tokensToSpanWithJavaUtilList_withComMdimensionJchronicOptions_(id<JavaUtilList> tokens, ComMdimensionJchronicOptions *options);

FOUNDATION_EXPORT id<JavaUtilList> ComMdimensionJchronicHandlersHandler_getRepeatersWithJavaUtilList_(id<JavaUtilList> tokens);

FOUNDATION_EXPORT ComMdimensionJchronicUtilsSpan *ComMdimensionJchronicHandlersHandler_getAnchorWithJavaUtilList_withComMdimensionJchronicOptions_(id<JavaUtilList> tokens, ComMdimensionJchronicOptions *options);

FOUNDATION_EXPORT ComMdimensionJchronicUtilsSpan *ComMdimensionJchronicHandlersHandler_dayOrTimeWithJavaUtilCalendar_withJavaUtilList_withComMdimensionJchronicOptions_(JavaUtilCalendar *dayStart, id<JavaUtilList> timeTokens, ComMdimensionJchronicOptions *options);

FOUNDATION_EXPORT ComMdimensionJchronicUtilsSpan *ComMdimensionJchronicHandlersHandler_findWithinWithJavaUtilList_withComMdimensionJchronicUtilsSpan_withComMdimensionJchronicTagsPointer_PointerType_withComMdimensionJchronicOptions_(id<JavaUtilList> tags, ComMdimensionJchronicUtilsSpan *span, ComMdimensionJchronicTagsPointer_PointerType *pointer, ComMdimensionJchronicOptions *options);

FOUNDATION_EXPORT id<JavaUtilList> ComMdimensionJchronicHandlersHandler_dealiasAndDisambiguateTimesWithJavaUtilList_withComMdimensionJchronicOptions_(id<JavaUtilList> tokens, ComMdimensionJchronicOptions *options);

J2OBJC_TYPE_LITERAL_HEADER(ComMdimensionJchronicHandlersHandler)

#endif

#if !defined (ComMdimensionJchronicHandlersHandler_HandlerType_) && (INCLUDE_ALL_ComMdimensionJchronicHandlersHandler || defined(INCLUDE_ComMdimensionJchronicHandlersHandler_HandlerType))
#define ComMdimensionJchronicHandlersHandler_HandlerType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComMdimensionJchronicHandlersHandler_HandlerType_Enum) {
  ComMdimensionJchronicHandlersHandler_HandlerType_Enum_TIME = 0,
  ComMdimensionJchronicHandlersHandler_HandlerType_Enum_DATE = 1,
  ComMdimensionJchronicHandlersHandler_HandlerType_Enum_ANCHOR = 2,
  ComMdimensionJchronicHandlersHandler_HandlerType_Enum_ARROW = 3,
  ComMdimensionJchronicHandlersHandler_HandlerType_Enum_NARROW = 4,
};

@interface ComMdimensionJchronicHandlersHandler_HandlerType : JavaLangEnum < NSCopying >

#pragma mark Public

+ (ComMdimensionJchronicHandlersHandler_HandlerType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(ComMdimensionJchronicHandlersHandler_HandlerType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComMdimensionJchronicHandlersHandler_HandlerType *ComMdimensionJchronicHandlersHandler_HandlerType_values_[];

inline ComMdimensionJchronicHandlersHandler_HandlerType *ComMdimensionJchronicHandlersHandler_HandlerType_get_TIME();
J2OBJC_ENUM_CONSTANT(ComMdimensionJchronicHandlersHandler_HandlerType, TIME)

inline ComMdimensionJchronicHandlersHandler_HandlerType *ComMdimensionJchronicHandlersHandler_HandlerType_get_DATE();
J2OBJC_ENUM_CONSTANT(ComMdimensionJchronicHandlersHandler_HandlerType, DATE)

inline ComMdimensionJchronicHandlersHandler_HandlerType *ComMdimensionJchronicHandlersHandler_HandlerType_get_ANCHOR();
J2OBJC_ENUM_CONSTANT(ComMdimensionJchronicHandlersHandler_HandlerType, ANCHOR)

inline ComMdimensionJchronicHandlersHandler_HandlerType *ComMdimensionJchronicHandlersHandler_HandlerType_get_ARROW();
J2OBJC_ENUM_CONSTANT(ComMdimensionJchronicHandlersHandler_HandlerType, ARROW)

inline ComMdimensionJchronicHandlersHandler_HandlerType *ComMdimensionJchronicHandlersHandler_HandlerType_get_NARROW();
J2OBJC_ENUM_CONSTANT(ComMdimensionJchronicHandlersHandler_HandlerType, NARROW)

FOUNDATION_EXPORT IOSObjectArray *ComMdimensionJchronicHandlersHandler_HandlerType_values();

FOUNDATION_EXPORT ComMdimensionJchronicHandlersHandler_HandlerType *ComMdimensionJchronicHandlersHandler_HandlerType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComMdimensionJchronicHandlersHandler_HandlerType *ComMdimensionJchronicHandlersHandler_HandlerType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComMdimensionJchronicHandlersHandler_HandlerType)

#endif

#pragma pop_macro("INCLUDE_ALL_ComMdimensionJchronicHandlersHandler")
