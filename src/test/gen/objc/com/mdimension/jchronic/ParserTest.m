//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/test/java/com/mdimension/jchronic/ParserTest.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/Chronic.h"
#include "com/mdimension/jchronic/Options.h"
#include "com/mdimension/jchronic/ParserTest.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "junit/framework/TestCase.h"

@interface ComMdimensionJchronicParserTest () {
 @public
  JavaUtilCalendar *_time_2006_08_16_14_00_00_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicParserTest, _time_2006_08_16_14_00_00_, JavaUtilCalendar *)

J2OBJC_INITIALIZED_DEFN(ComMdimensionJchronicParserTest)

JavaUtilCalendar *ComMdimensionJchronicParserTest_TIME_2006_08_16_14_00_00;

@implementation ComMdimensionJchronicParserTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComMdimensionJchronicParserTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssign(&_time_2006_08_16_14_00_00_, ComMdimensionJchronicParserTest_TIME_2006_08_16_14_00_00);
}

- (void)assertEqualsWithJavaUtilCalendar:(JavaUtilCalendar *)ec
      withComMdimensionJchronicUtilsSpan:(ComMdimensionJchronicUtilsSpan *)span {
  [self assertEqualsWithJavaUtilCalendar:ec withJavaUtilCalendar:(span == nil) ? nil : [((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) getBeginCalendar]];
}

- (void)assertEqualsWithJavaUtilCalendar:(JavaUtilCalendar *)ec
                    withJavaUtilCalendar:(JavaUtilCalendar *)ac {
  JunitFrameworkTestCase_assertEqualsWithId_withId_((ec == nil) ? nil : [((JavaUtilCalendar *) nil_chk(ec)) getTime], (ac == nil) ? nil : [((JavaUtilCalendar *) nil_chk(ac)) getTime]);
}

- (void)test_parse_guess_dates {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"may 27"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2007, 5, 27, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 28" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 5, 28, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 28 5pm" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 5, 28, 17) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 28 at 5pm" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 5, 28, 17) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 28 at 5:32.19pm" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 5, 28, 17, 32, 19) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 27th"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2007, 5, 27, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 27th" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 5, 27, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 27th 5:00 pm" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 5, 27, 17) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 27th at 5pm" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 5, 27, 17) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 27th at 5" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithInt_(0)];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2007, 5, 27, 5) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"June 1979"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(1979, 6, 16, 0) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"dec 79"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(1979, 12, 16, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"jan 3 2010"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2010, 1, 3, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"jan 3 2010 midnight"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2010, 1, 4, 0) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"jan 3 2010 at midnight"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2010, 1, 4, 0) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"jan 3 2010 at 4" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithInt_(0)];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2010, 1, 3, 4) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 27 79"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(1979, 5, 27, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 27 79 4:30"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(1979, 5, 27, 16, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 27 79 at 4:30" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithInt_(0)];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(1979, 5, 27, 4, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3 jan 2010"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2010, 1, 3, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3 jan 2010 4pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2010, 1, 3, 16) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"5/27/1979"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(1979, 5, 27, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"5/27/1979 4am"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(1979, 5, 27, 4) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"27/5/1979"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(1979, 5, 27, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"27/5/1979 @ 0700"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(1979, 5, 27, 7) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"05/06"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 5, 16, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"12/06"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 12, 16, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"13/06"];
  [self assertEqualsWithJavaUtilCalendar:nil withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2000-1-1"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2000, 1, 1, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2006-08-20"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 20, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2006-08-20 7pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 20, 19) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2006-08-20 03:00"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 20, 3) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2006-08-20 03:30:30"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 20, 3, 30, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2006-08-20 15:30:30"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 20, 15, 30, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2006-08-20 15:30.30"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 20, 15, 30, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"Mon Apr 02 17:00:00 PDT 2007"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2007, 4, 2, 17) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 40"];
  [self assertEqualsWithJavaUtilCalendar:nil withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"may 27 40"];
  [self assertEqualsWithJavaUtilCalendar:nil withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"1800-08-20"];
  [self assertEqualsWithJavaUtilCalendar:nil withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_foo {
  ComMdimensionJchronicChronic_parseWithNSString_(@"two months ago this friday");
}

- (void)test_parse_guess_r {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"friday"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 18, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"tue"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 22, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"5"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 17) withComMdimensionJchronicUtilsSpan:time];
  ComMdimensionJchronicOptions *options = create_ComMdimensionJchronicOptions_initWithInt_(0);
  [options setCompatibilityModeWithBoolean:true];
  [options setNowWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 3, 0, 0, 0)];
  time = ComMdimensionJchronicChronic_parseWithNSString_withComMdimensionJchronicOptions_(@"5", options);
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 5) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"13:00"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 13) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"13:45"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 17, 13, 45) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"november"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 11, 16) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_rr {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"friday 13:00"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 18, 13) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"monday 4:00"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 21, 16) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"sat 4:00" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithInt_(0)];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 19, 4) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"sunday 4:20" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithInt_(0)];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 20, 4, 20) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"4 pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 16) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"4 am" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithInt_(0)];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 4) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"12 pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"12:01 pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 12, 1) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"12:01 am"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 0, 1) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"12 am"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 16) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"4:00 in the morning"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 4) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"november 4"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 11, 4, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"aug 24"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 24, 12) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_rrr {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"friday 1 pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 18, 13) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"friday 11 at night"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 18, 23) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"friday 11 in the evening"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 18, 23) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"sunday 6am"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 20, 6) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"friday evening at 7"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 18, 19) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_gr {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"this year"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 10, 24, 12, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this year" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 4, 24, 12, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this month"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 24, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this month" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 8, 12) withComMdimensionJchronicUtilsSpan:time];
  ComMdimensionJchronicOptions *options = create_ComMdimensionJchronicOptions_init();
  [options setCompatibilityModeWithBoolean:true];
  [options setNowWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 11, 15)];
  time = ComMdimensionJchronicChronic_parseWithNSString_withComMdimensionJchronicOptions_(@"next month", options);
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 12, 16, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"last november"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2005, 11, 16) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this fortnight"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 21, 19, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this fortnight" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 14, 19) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this week"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 18, 7, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this week" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 14, 19) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this weekend"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 20) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this weekend" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 13) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"last weekend"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 13) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this day"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 19, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this day" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 7) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"today"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 19, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"yesterday"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"tomorrow"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this tuesday"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 22, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"next tuesday"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 22, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"last tuesday"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this wed"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 23, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"next wed"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 23, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"last wed"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 9, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this morning"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 9) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"tonight"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 22) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"next minute"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 1, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this second"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this second" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithComMdimensionJchronicTagsPointer_PointerType_(JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST))];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"next second"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 0, 1) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"last second"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 13, 59, 59) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_grr {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"yesterday at 4:00"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 16) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"today at 9:00"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 9) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"today at 2100"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 21) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this day at 0900"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 9) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"tomorrow at 0900"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 9) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"yesterday at 4:00" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithInt_(0)];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 4) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"last friday at 4:00"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 11, 16) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"next wed 4:00"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 23, 16) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"yesterday afternoon"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 15) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"last week tuesday"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 8, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"tonight at 7"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 19) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"tonight 7"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 19) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"7 tonight"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 19) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_grrr {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"today at 6:00pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 18) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"today at 6:00am"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 6) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"this day 1800"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 18) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"yesterday at 4:00pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 16) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"tomorrow evening at 7"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 19) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"tomorrow morning at 5:30"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 17, 5, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"next monday at 12:01 am"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 21, 00, 1) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"next monday at 12:01 pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 21, 12, 1) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_rgr {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"afternoon yesterday"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 15) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"tuesday last week"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 8, 12) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_s_r_p {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"3 years ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2003, 8, 16, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"1 month ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 7, 16, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"1 fortnight ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 2, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2 fortnights ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 7, 19, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3 weeks ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 7, 26, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2 weekends ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 5) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3 days ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 13, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"5 mornings ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 12, 9) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"7 hours ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 7) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3 minutes ago"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 13, 57) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"20 seconds before now"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 13, 59, 40) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3 years from now"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2009, 8, 16, 14, 0, 0) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"6 months hence"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2007, 2, 16, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3 fortnights hence"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 9, 27, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"1 week from now"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 23, 14, 0, 0) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"1 weekend from now"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 19) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2 weekends from now"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 26) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"1 day hence"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"5 mornings hence"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 21, 9) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"1 hour from now"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 15) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"20 minutes hence"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 20) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"20 seconds from now"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 0, 20) withComMdimensionJchronicUtilsSpan:time];
  ComMdimensionJchronicOptions *options = create_ComMdimensionJchronicOptions_init();
  [options setCompatibilityModeWithBoolean:true];
  [options setNowWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2007, 3, 7, 23, 30)];
  time = ComMdimensionJchronicChronic_parseWithNSString_withComMdimensionJchronicOptions_(@"2 months ago", options);
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2007, 1, 7, 23, 30) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_p_s_r {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"in 3 hours"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 17) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_s_r_p_a {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"3 years ago tomorrow"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2003, 8, 17, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3 years ago this friday"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2003, 8, 18, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3 months ago saturday at 5:00 pm"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 5, 19, 17) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"2 days from this second"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 18, 14) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"7 hours before tomorrow at midnight"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 17) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_o_r_s_r {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"3rd wednesday in november"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 11, 15, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"10th wednesday in november"];
  [self assertEqualsWithJavaUtilCalendar:nil withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_o_r_g_r {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"3rd month next year"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2007, 3, 16, 12, 30) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"3rd thursday this september"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 9, 21, 12) withComMdimensionJchronicUtilsSpan:time];
  time = [self parse_nowWithNSString:@"4th day last week"];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 9, 12) withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_guess_nonsense {
  ComMdimensionJchronicUtilsSpan *time;
  time = [self parse_nowWithNSString:@"some stupid nonsense"];
  [self assertEqualsWithJavaUtilCalendar:nil withComMdimensionJchronicUtilsSpan:time];
}

- (void)test_parse_span {
  ComMdimensionJchronicUtilsSpan *span;
  span = [self parse_nowWithNSString:@"friday" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithBoolean_(false)];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 18) withJavaUtilCalendar:[((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) getBeginCalendar]];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 19) withJavaUtilCalendar:[span getEndCalendar]];
  span = [self parse_nowWithNSString:@"november" withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_initWithBoolean_(false)];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_(2006, 11) withJavaUtilCalendar:[((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) getBeginCalendar]];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_(2006, 12) withJavaUtilCalendar:[span getEndCalendar]];
  ComMdimensionJchronicOptions *options = create_ComMdimensionJchronicOptions_initWithJavaUtilCalendar_withBoolean_(_time_2006_08_16_14_00_00_, false);
  span = ComMdimensionJchronicChronic_parseWithNSString_withComMdimensionJchronicOptions_(@"weekend", options);
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 19) withJavaUtilCalendar:[((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) getBeginCalendar]];
  [self assertEqualsWithJavaUtilCalendar:ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 21) withJavaUtilCalendar:[span getEndCalendar]];
}

- (void)test_parse_words {
  JunitFrameworkTestCase_assertEqualsWithId_withId_([self parse_nowWithNSString:@"33 days from now"], [self parse_nowWithNSString:@"thirty-three days from now"]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_([self parse_nowWithNSString:@"2867532 seconds from now"], [self parse_nowWithNSString:@"two million eight hundred and sixty seven thousand five hundred and thirty two seconds from now"]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_([self parse_nowWithNSString:@"may 10th"], [self parse_nowWithNSString:@"may tenth"]);
}

- (void)test_parse_only_complete_pointers {
  [self assertEqualsWithJavaUtilCalendar:_time_2006_08_16_14_00_00_ withComMdimensionJchronicUtilsSpan:[self parse_nowWithNSString:@"eat pasty buns today at 2pm"]];
  [self assertEqualsWithJavaUtilCalendar:_time_2006_08_16_14_00_00_ withComMdimensionJchronicUtilsSpan:[self parse_nowWithNSString:@"futuristically speaking today at 2pm"]];
  [self assertEqualsWithJavaUtilCalendar:_time_2006_08_16_14_00_00_ withComMdimensionJchronicUtilsSpan:[self parse_nowWithNSString:@"meeting today at 2pm"]];
}

- (ComMdimensionJchronicUtilsSpan *)parse_nowWithNSString:(NSString *)string {
  return [self parse_nowWithNSString:string withComMdimensionJchronicOptions:create_ComMdimensionJchronicOptions_init()];
}

- (ComMdimensionJchronicUtilsSpan *)parse_nowWithNSString:(NSString *)string
                         withComMdimensionJchronicOptions:(ComMdimensionJchronicOptions *)options {
  [((ComMdimensionJchronicOptions *) nil_chk(options)) setNowWithJavaUtilCalendar:ComMdimensionJchronicParserTest_TIME_2006_08_16_14_00_00];
  [options setCompatibilityModeWithBoolean:true];
  [options setDebugWithBoolean:true];
  return ComMdimensionJchronicChronic_parseWithNSString_withComMdimensionJchronicOptions_(string, options);
}

- (void)dealloc {
  RELEASE_(_time_2006_08_16_14_00_00_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LComMdimensionJchronicUtilsSpan;", 0x1, 4, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(assertEqualsWithJavaUtilCalendar:withComMdimensionJchronicUtilsSpan:);
  methods[3].selector = @selector(assertEqualsWithJavaUtilCalendar:withJavaUtilCalendar:);
  methods[4].selector = @selector(test_parse_guess_dates);
  methods[5].selector = @selector(test_foo);
  methods[6].selector = @selector(test_parse_guess_r);
  methods[7].selector = @selector(test_parse_guess_rr);
  methods[8].selector = @selector(test_parse_guess_rrr);
  methods[9].selector = @selector(test_parse_guess_gr);
  methods[10].selector = @selector(test_parse_guess_grr);
  methods[11].selector = @selector(test_parse_guess_grrr);
  methods[12].selector = @selector(test_parse_guess_rgr);
  methods[13].selector = @selector(test_parse_guess_s_r_p);
  methods[14].selector = @selector(test_parse_guess_p_s_r);
  methods[15].selector = @selector(test_parse_guess_s_r_p_a);
  methods[16].selector = @selector(test_parse_guess_o_r_s_r);
  methods[17].selector = @selector(test_parse_guess_o_r_g_r);
  methods[18].selector = @selector(test_parse_guess_nonsense);
  methods[19].selector = @selector(test_parse_span);
  methods[20].selector = @selector(test_parse_words);
  methods[21].selector = @selector(test_parse_only_complete_pointers);
  methods[22].selector = @selector(parse_nowWithNSString:);
  methods[23].selector = @selector(parse_nowWithNSString:withComMdimensionJchronicOptions:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TIME_2006_08_16_14_00_00", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "_time_2006_08_16_14_00_00_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "assertEquals", "LJavaUtilCalendar;LComMdimensionJchronicUtilsSpan;", "LJavaUtilCalendar;LJavaUtilCalendar;", "parse_now", "LNSString;", "LNSString;LComMdimensionJchronicOptions;", &ComMdimensionJchronicParserTest_TIME_2006_08_16_14_00_00 };
  static const J2ObjcClassInfo _ComMdimensionJchronicParserTest = { "ParserTest", "com.mdimension.jchronic", ptrTable, methods, fields, 7, 0x1, 24, 2, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicParserTest;
}

+ (void)initialize {
  if (self == [ComMdimensionJchronicParserTest class]) {
    JreStrongAssign(&ComMdimensionJchronicParserTest_TIME_2006_08_16_14_00_00, ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 0, 0, 0));
    J2OBJC_SET_INITIALIZED(ComMdimensionJchronicParserTest)
  }
}

@end

void ComMdimensionJchronicParserTest_init(ComMdimensionJchronicParserTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComMdimensionJchronicParserTest *new_ComMdimensionJchronicParserTest_init() {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicParserTest, init)
}

ComMdimensionJchronicParserTest *create_ComMdimensionJchronicParserTest_init() {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicParserTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicParserTest)
