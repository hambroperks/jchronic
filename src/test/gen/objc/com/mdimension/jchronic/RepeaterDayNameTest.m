//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/test/java/com/mdimension/jchronic/RepeaterDayNameTest.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/RepeaterDayNameTest.h"
#include "com/mdimension/jchronic/repeaters/RepeaterDayName.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/util/Calendar.h"
#include "junit/framework/TestCase.h"

@interface ComMdimensionJchronicRepeaterDayNameTest () {
 @public
  JavaUtilCalendar *_now_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicRepeaterDayNameTest, _now_, JavaUtilCalendar *)

@implementation ComMdimensionJchronicRepeaterDayNameTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComMdimensionJchronicRepeaterDayNameTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssign(&_now_, ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 0, 0, 0));
}

- (void)testMatch {
  ComMdimensionJchronicUtilsToken *token = create_ComMdimensionJchronicUtilsToken_initWithNSString_(@"saturday");
  ComMdimensionJchronicRepeatersRepeaterDayName *repeater = ComMdimensionJchronicRepeatersRepeaterDayName_scanWithComMdimensionJchronicUtilsToken_(token);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, SATURDAY), [((ComMdimensionJchronicRepeatersRepeaterDayName *) nil_chk(repeater)) getType]);
  token = create_ComMdimensionJchronicUtilsToken_initWithNSString_(@"sunday");
  repeater = ComMdimensionJchronicRepeatersRepeaterDayName_scanWithComMdimensionJchronicUtilsToken_(token);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, SUNDAY), [((ComMdimensionJchronicRepeatersRepeaterDayName *) nil_chk(repeater)) getType]);
}

- (void)testNextFuture {
  ComMdimensionJchronicUtilsSpan *span;
  ComMdimensionJchronicRepeatersRepeaterDayName *mondays = create_ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, MONDAY));
  [mondays setStartWithJavaUtilCalendar:_now_];
  span = [mondays nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 21), [((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 22), [span getEndCalendar]);
  span = [mondays nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 28), [((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 29), [span getEndCalendar]);
}

- (void)testNextPast {
  ComMdimensionJchronicUtilsSpan *span;
  ComMdimensionJchronicRepeatersRepeaterDayName *mondays = create_ComMdimensionJchronicRepeatersRepeaterDayName_initWithComMdimensionJchronicRepeatersRepeaterDayName_DayName_(JreLoadEnum(ComMdimensionJchronicRepeatersRepeaterDayName_DayName, MONDAY));
  [mondays setStartWithJavaUtilCalendar:_now_];
  span = [mondays nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 14), [((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 15), [span getEndCalendar]);
  span = [mondays nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 7), [((ComMdimensionJchronicUtilsSpan *) nil_chk(span)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_(2006, 8, 8), [span getEndCalendar]);
}

- (void)dealloc {
  RELEASE_(_now_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testMatch);
  methods[3].selector = @selector(testNextFuture);
  methods[4].selector = @selector(testNextPast);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_now_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicRepeaterDayNameTest = { "RepeaterDayNameTest", "com.mdimension.jchronic", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicRepeaterDayNameTest;
}

@end

void ComMdimensionJchronicRepeaterDayNameTest_init(ComMdimensionJchronicRepeaterDayNameTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComMdimensionJchronicRepeaterDayNameTest *new_ComMdimensionJchronicRepeaterDayNameTest_init() {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicRepeaterDayNameTest, init)
}

ComMdimensionJchronicRepeaterDayNameTest *create_ComMdimensionJchronicRepeaterDayNameTest_init() {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicRepeaterDayNameTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeaterDayNameTest)
