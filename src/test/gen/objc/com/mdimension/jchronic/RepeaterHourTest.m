//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/test/java/com/mdimension/jchronic/RepeaterHourTest.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/RepeaterHourTest.h"
#include "com/mdimension/jchronic/repeaters/RepeaterHour.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "java/util/Calendar.h"
#include "junit/framework/TestCase.h"

@interface ComMdimensionJchronicRepeaterHourTest () {
 @public
  JavaUtilCalendar *_now_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicRepeaterHourTest, _now_, JavaUtilCalendar *)

@implementation ComMdimensionJchronicRepeaterHourTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComMdimensionJchronicRepeaterHourTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssign(&_now_, ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 0, 0, 0));
}

- (void)testNextFuture {
  ComMdimensionJchronicRepeatersRepeaterHour *hours = create_ComMdimensionJchronicRepeatersRepeaterHour_init();
  [hours setStartWithJavaUtilCalendar:_now_];
  ComMdimensionJchronicUtilsSpan *nextHour = [hours nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 15), [((ComMdimensionJchronicUtilsSpan *) nil_chk(nextHour)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 16), [nextHour getEndCalendar]);
  ComMdimensionJchronicUtilsSpan *nextNextHour = [hours nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 16), [((ComMdimensionJchronicUtilsSpan *) nil_chk(nextNextHour)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 17), [nextNextHour getEndCalendar]);
}

- (void)testNextPast {
  ComMdimensionJchronicRepeatersRepeaterHour *hours = create_ComMdimensionJchronicRepeatersRepeaterHour_init();
  [hours setStartWithJavaUtilCalendar:_now_];
  ComMdimensionJchronicUtilsSpan *lastHour = [hours nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 13), [((ComMdimensionJchronicUtilsSpan *) nil_chk(lastHour)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 14), [lastHour getEndCalendar]);
  ComMdimensionJchronicUtilsSpan *lastLastHour = [hours nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 12), [((ComMdimensionJchronicUtilsSpan *) nil_chk(lastLastHour)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 13), [lastLastHour getEndCalendar]);
}

- (void)testThis {
  JreStrongAssign(&_now_, ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 30));
  ComMdimensionJchronicRepeatersRepeaterHour *hours = create_ComMdimensionJchronicRepeatersRepeaterHour_init();
  [hours setStartWithJavaUtilCalendar:_now_];
  ComMdimensionJchronicUtilsSpan *thisHour;
  thisHour = [hours thisSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 31), [((ComMdimensionJchronicUtilsSpan *) nil_chk(thisHour)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 15), [thisHour getEndCalendar]);
  thisHour = [hours thisSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 14), [((ComMdimensionJchronicUtilsSpan *) nil_chk(thisHour)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 30), [thisHour getEndCalendar]);
}

- (void)testOffset {
  ComMdimensionJchronicUtilsSpan *span = create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withInt_withLong_(_now_, JavaUtilCalendar_SECOND, 1);
  ComMdimensionJchronicUtilsSpan *offsetSpan;
  offsetSpan = [create_ComMdimensionJchronicRepeatersRepeaterHour_init() getOffsetWithComMdimensionJchronicUtilsSpan:span withInt:3 withComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 17), [((ComMdimensionJchronicUtilsSpan *) nil_chk(offsetSpan)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 17, 0, 1), [offsetSpan getEndCalendar]);
  offsetSpan = [create_ComMdimensionJchronicRepeatersRepeaterHour_init() getOffsetWithComMdimensionJchronicUtilsSpan:span withInt:24 withComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 14), [((ComMdimensionJchronicUtilsSpan *) nil_chk(offsetSpan)) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 15, 14, 0, 1), [offsetSpan getEndCalendar]);
}

- (void)dealloc {
  RELEASE_(_now_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testNextFuture);
  methods[3].selector = @selector(testNextPast);
  methods[4].selector = @selector(testThis);
  methods[5].selector = @selector(testOffset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_now_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicRepeaterHourTest = { "RepeaterHourTest", "com.mdimension.jchronic", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicRepeaterHourTest;
}

@end

void ComMdimensionJchronicRepeaterHourTest_init(ComMdimensionJchronicRepeaterHourTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComMdimensionJchronicRepeaterHourTest *new_ComMdimensionJchronicRepeaterHourTest_init() {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicRepeaterHourTest, init)
}

ComMdimensionJchronicRepeaterHourTest *create_ComMdimensionJchronicRepeaterHourTest_init() {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicRepeaterHourTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeaterHourTest)
