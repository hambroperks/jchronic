//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/test/java/com/mdimension/jchronic/TokenTestCase.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/TokenTestCase.h"
#include "com/mdimension/jchronic/tags/Scalar.h"
#include "com/mdimension/jchronic/tags/StringTag.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "com/mdimension/jchronic/utils/Token.h"
#include "java/lang/Integer.h"
#include "java/util/Calendar.h"
#include "java/util/List.h"
#include "junit/framework/TestCase.h"

@interface ComMdimensionJchronicTokenTestCase () {
 @public
  JavaUtilCalendar *_now_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicTokenTestCase, _now_, JavaUtilCalendar *)

@implementation ComMdimensionJchronicTokenTestCase

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComMdimensionJchronicTokenTestCase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssign(&_now_, ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 0, 0, 0));
}

- (void)testToken {
  ComMdimensionJchronicUtilsToken *token = create_ComMdimensionJchronicUtilsToken_initWithNSString_(@"foo");
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(0, [((id<JavaUtilList>) nil_chk([token getTags])) size]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([token isTagged]);
  [token tagWithComMdimensionJchronicTagsTag:create_ComMdimensionJchronicTagsStringTag_initWithNSString_(@"mytag")];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [((id<JavaUtilList>) nil_chk([token getTags])) size]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([token isTagged]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicTagsStringTag_class_(), [((ComMdimensionJchronicTagsStringTag *) nil_chk([token getTagWithIOSClass:ComMdimensionJchronicTagsStringTag_class_()])) java_getClass]);
  [token tagWithComMdimensionJchronicTagsTag:create_ComMdimensionJchronicTagsScalar_initWithJavaLangInteger_(JavaLangInteger_valueOfWithInt_(5))];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(2, [((id<JavaUtilList>) nil_chk([token getTags])) size]);
  [token untagWithIOSClass:ComMdimensionJchronicTagsStringTag_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [((id<JavaUtilList>) nil_chk([token getTags])) size]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"foo", [token getWord]);
}

- (void)dealloc {
  RELEASE_(_now_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testToken);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_now_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicTokenTestCase = { "TokenTestCase", "com.mdimension.jchronic", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicTokenTestCase;
}

@end

void ComMdimensionJchronicTokenTestCase_init(ComMdimensionJchronicTokenTestCase *self) {
  JunitFrameworkTestCase_init(self);
}

ComMdimensionJchronicTokenTestCase *new_ComMdimensionJchronicTokenTestCase_init() {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicTokenTestCase, init)
}

ComMdimensionJchronicTokenTestCase *create_ComMdimensionJchronicTokenTestCase_init() {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicTokenTestCase, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicTokenTestCase)
