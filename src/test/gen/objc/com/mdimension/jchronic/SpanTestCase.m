//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/test/java/com/mdimension/jchronic/SpanTestCase.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/SpanTestCase.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "java/util/Calendar.h"
#include "junit/framework/TestCase.h"

@interface ComMdimensionJchronicSpanTestCase () {
 @public
  JavaUtilCalendar *_now_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicSpanTestCase, _now_, JavaUtilCalendar *)

@implementation ComMdimensionJchronicSpanTestCase

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComMdimensionJchronicSpanTestCase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssign(&_now_, ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 0, 0, 0));
}

- (void)testSpanWidth {
  ComMdimensionJchronicUtilsSpan *span = create_ComMdimensionJchronicUtilsSpan_initWithJavaUtilCalendar_withJavaUtilCalendar_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 0), ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 0));
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(60 * 60 * 24, [span getWidth]);
}

- (void)testSpanMath {
  ComMdimensionJchronicUtilsSpan *span = create_ComMdimensionJchronicUtilsSpan_initWithLong_withLong_(1, 2);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(2, [((ComMdimensionJchronicUtilsSpan *) nil_chk([span addWithLong:1])) getBegin]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(3, [((ComMdimensionJchronicUtilsSpan *) nil_chk([span addWithLong:1])) getEnd]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(0, [((ComMdimensionJchronicUtilsSpan *) nil_chk([span subtractWithLong:1])) getBegin]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(1, [((ComMdimensionJchronicUtilsSpan *) nil_chk([span subtractWithLong:1])) getEnd]);
}

- (void)dealloc {
  RELEASE_(_now_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testSpanWidth);
  methods[3].selector = @selector(testSpanMath);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_now_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicSpanTestCase = { "SpanTestCase", "com.mdimension.jchronic", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicSpanTestCase;
}

@end

void ComMdimensionJchronicSpanTestCase_init(ComMdimensionJchronicSpanTestCase *self) {
  JunitFrameworkTestCase_init(self);
}

ComMdimensionJchronicSpanTestCase *new_ComMdimensionJchronicSpanTestCase_init() {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicSpanTestCase, init)
}

ComMdimensionJchronicSpanTestCase *create_ComMdimensionJchronicSpanTestCase_init() {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicSpanTestCase, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicSpanTestCase)
