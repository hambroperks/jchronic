//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jchronic/src/test/java/com/mdimension/jchronic/RepeaterTimeTest.java
//

#include "J2ObjC_source.h"
#include "com/mdimension/jchronic/RepeaterTimeTest.h"
#include "com/mdimension/jchronic/repeaters/RepeaterTime.h"
#include "com/mdimension/jchronic/tags/Pointer.h"
#include "com/mdimension/jchronic/utils/Span.h"
#include "com/mdimension/jchronic/utils/Tick.h"
#include "com/mdimension/jchronic/utils/Time.h"
#include "java/util/Calendar.h"
#include "junit/framework/TestCase.h"

@interface ComMdimensionJchronicRepeaterTimeTest () {
 @public
  JavaUtilCalendar *_now_;
}

@end

J2OBJC_FIELD_SETTER(ComMdimensionJchronicRepeaterTimeTest, _now_, JavaUtilCalendar *)

@implementation ComMdimensionJchronicRepeaterTimeTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComMdimensionJchronicRepeaterTimeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssign(&_now_, ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(2006, 8, 16, 14, 0, 0, 0));
}

- (void)testNextFuture {
  ComMdimensionJchronicRepeatersRepeaterTime *t;
  t = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"4:00");
  [t setStartWithJavaUtilCalendar:_now_];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 16), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)])) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 4), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)])) getBeginCalendar]);
  t = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"13:00");
  [t setStartWithJavaUtilCalendar:_now_];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 13), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)])) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 18, 13), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)])) getBeginCalendar]);
  t = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"0400");
  [t setStartWithJavaUtilCalendar:_now_];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 17, 4), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)])) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 18, 4), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, FUTURE)])) getBeginCalendar]);
}

- (void)testNextPast {
  ComMdimensionJchronicRepeatersRepeaterTime *t;
  t = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"4:00");
  [t setStartWithJavaUtilCalendar:_now_];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 4), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)])) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 16), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)])) getBeginCalendar]);
  t = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"13:00");
  [t setStartWithJavaUtilCalendar:_now_];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 16, 13), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)])) getBeginCalendar]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(ComMdimensionJchronicUtilsTime_constructWithInt_withInt_withInt_withInt_(2006, 8, 15, 13), [((ComMdimensionJchronicUtilsSpan *) nil_chk([t nextSpanWithComMdimensionJchronicTagsPointer_PointerType:JreLoadEnum(ComMdimensionJchronicTagsPointer_PointerType, PAST)])) getBeginCalendar]);
}

- (void)testType {
  ComMdimensionJchronicRepeatersRepeaterTime *t1;
  t1 = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"4");
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(14400, [((ComMdimensionJchronicUtilsTick *) nil_chk([t1 getType])) intValue]);
  t1 = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"14");
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(50400, [((ComMdimensionJchronicUtilsTick *) nil_chk([t1 getType])) intValue]);
  t1 = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"4:00");
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(14400, [((ComMdimensionJchronicUtilsTick *) nil_chk([t1 getType])) intValue]);
  t1 = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"4:30");
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(16200, [((ComMdimensionJchronicUtilsTick *) nil_chk([t1 getType])) intValue]);
  t1 = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"1400");
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(50400, [((ComMdimensionJchronicUtilsTick *) nil_chk([t1 getType])) intValue]);
  t1 = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"0400");
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(14400, [((ComMdimensionJchronicUtilsTick *) nil_chk([t1 getType])) intValue]);
  t1 = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"04");
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(14400, [((ComMdimensionJchronicUtilsTick *) nil_chk([t1 getType])) intValue]);
  t1 = create_ComMdimensionJchronicRepeatersRepeaterTime_initWithNSString_(@"400");
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(14400, [((ComMdimensionJchronicUtilsTick *) nil_chk([t1 getType])) intValue]);
}

- (void)dealloc {
  RELEASE_(_now_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testNextFuture);
  methods[3].selector = @selector(testNextPast);
  methods[4].selector = @selector(testType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_now_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComMdimensionJchronicRepeaterTimeTest = { "RepeaterTimeTest", "com.mdimension.jchronic", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ComMdimensionJchronicRepeaterTimeTest;
}

@end

void ComMdimensionJchronicRepeaterTimeTest_init(ComMdimensionJchronicRepeaterTimeTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComMdimensionJchronicRepeaterTimeTest *new_ComMdimensionJchronicRepeaterTimeTest_init() {
  J2OBJC_NEW_IMPL(ComMdimensionJchronicRepeaterTimeTest, init)
}

ComMdimensionJchronicRepeaterTimeTest *create_ComMdimensionJchronicRepeaterTimeTest_init() {
  J2OBJC_CREATE_IMPL(ComMdimensionJchronicRepeaterTimeTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMdimensionJchronicRepeaterTimeTest)
